<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\mbed_skel_LPC1768.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\mbed_skel_LPC1768.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri May 07 23:06:01 2021
<BR><P>
<H3>Maximum Stack Usage =        916 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">NMI_Handler</a><BR>
 <LI><a href="#[20]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">HardFault_Handler</a><BR>
 <LI><a href="#[21]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">MemManage_Handler</a><BR>
 <LI><a href="#[22]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BusFault_Handler</a><BR>
 <LI><a href="#[23]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">UsageFault_Handler</a><BR>
 <LI><a href="#[24]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">SVC_Handler</a><BR>
 <LI><a href="#[25]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DebugMon_Handler</a><BR>
 <LI><a href="#[26]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">PendSV_Handler</a><BR>
 <LI><a href="#[27]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">SysTick_Handler</a><BR>
 <LI><a href="#[3e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1e7]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[1e3]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[1e1]">gpio_dir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[1e6]">gpio_init_out</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[1a2]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[1df]">mbed_die</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[186]">gpio_init_out_ex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[18c]">serial_baud</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[11e]">_sys_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[191]">serial_init</a><BR>
 <LI><a href="#[1dc]">mbed_error_vfprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[191]">serial_init</a><BR>
 <LI><a href="#[1a4]">core_util_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[191]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[167]">mbed_assert_internal</a><BR>
 <LI><a href="#[174]">std::locale::locale()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c4]">std::locale::_C_init()</a><BR>
 <LI><a href="#[201]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[175]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[178]">__rw::__rw_allocate(unsigned, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[175]">__rw::__rw_throw(int, ...)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[57]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[56]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[3e]">ADC_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3f]">BOD_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[22]">BusFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[41]">CAN_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[42]">DMA_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[25]">DebugMon_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3a]">EINT0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3b]">EINT1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3c]">EINT2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3d]">EINT3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[44]">ENET_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[20]">HardFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[32]">I2C0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[33]">I2C1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[34]">I2C2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[43]">I2S_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[46]">MCPWM_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[21]">MemManage_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1f]">NMI_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[38]">PLL0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[48]">PLL1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[31]">PWM1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[26]">PendSV_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[47]">QEI_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[45]">RIT_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[39]">RTC_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[35]">SPI_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[36]">SSP0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[37]">SSP1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[24]">SVC_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[27]">SysTick_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_LPC17xx.o(i.SystemInit) referenced from startup_LPC17xx.o(.text)
 <LI><a href="#[29]">TIMER0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2a]">TIMER1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2b]">TIMER2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2c]">TIMER3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2d]">UART0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2e]">UART1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2f]">UART2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[30]">UART3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[40]">USB_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[23]">UsageFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[28]">WDT_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[67]">mixerButCallback(void*, std::bitset&lang;(unsigned)24&rang;)</a> from main.o(i._Z16mixerButCallbackPvSt6bitsetILj24EE) referenced from main.o(i.main)
 <LI><a href="#[64]">mixerCutCallback(void*)</a> from main.o(i._Z16mixerCutCallbackPv) referenced from main.o(i.main)
 <LI><a href="#[66]">mixerLedCallback(void*, std::bitset&lang;(unsigned)16&rang;)</a> from main.o(i._Z16mixerLedCallbackPvSt6bitsetILj16EE) referenced from main.o(i.main)
 <LI><a href="#[62]">mixerPgmCallback(void*, unsigned)</a> from main.o(i._Z16mixerPgmCallbackPvj) referenced from main.o(i.main)
 <LI><a href="#[63]">mixerPvwCallback(void*, unsigned)</a> from main.o(i._Z16mixerPvwCallbackPvj) referenced from main.o(i.main)
 <LI><a href="#[68]">serialIOClkEvent()</a> from main.o(i._Z16serialIOClkEventv) referenced from main.o(i.main)
 <LI><a href="#[65]">mixerTransCallback(void*)</a> from main.o(i._Z18mixerTransCallbackPv) referenced from main.o(i.main)
 <LI><a href="#[54]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[8a]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[8a]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[70]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
 <LI><a href="#[5f]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
 <LI><a href="#[5d]">__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</a> from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev) referenced from messages.o(i._ZSt13__rw_get_catsv)
 <LI><a href="#[9d]">__rw::__rw_throw_exception_noex(int, char*)</a> from rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc) referenced from rwthrowproc_noex.o(.data)
 <LI><a href="#[59]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[76]">mbed::SerialBase::lock()</a> from SerialBase.o(i._ZN4mbed10SerialBase4lockEv) referenced from SerialBase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[77]">mbed::SerialBase::unlock()</a> from SerialBase.o(i._ZN4mbed10SerialBase6unlockEv) referenced from SerialBase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[5a]">mbed::TimerEvent::irq(unsigned)</a> from TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[78]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from TimerEvent.o(i._ZN4mbed10TimerEventD2Ev) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[7a]">mbed::Serial::lock()</a> from Serial.o(i._ZN4mbed6Serial4lockEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7b]">mbed::Serial::unlock()</a> from Serial.o(i._ZN4mbed6Serial6unlockEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[60]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[60]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from main.o(i.__sti___8_main_cpp_main)
 <LI><a href="#[7f]">mbed::Stream::seek(long, int)</a> from Stream.o(i._ZN4mbed6Stream4seekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7f]">mbed::Stream::seek(long, int)</a> from Stream.o(i._ZN4mbed6Stream4seekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[80]">mbed::Stream::size()</a> from Stream.o(i._ZN4mbed6Stream4sizeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[80]">mbed::Stream::size()</a> from Stream.o(i._ZN4mbed6Stream4sizeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7d]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7d]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7c]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7c]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7e]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7e]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[84]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[87]">mbed::Ticker::handler()</a> from Ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[61]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[61]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from main.o(i.__sti___8_main_cpp_main)
 <LI><a href="#[96]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from SerialBase.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from SerialBase.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[98]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from SerialBase.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from SerialBase.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[97]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from SerialBase.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from SerialBase.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[5b]">mbed::Callback&lang;void()&rang;::~Callback()</a> from Serial.o(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from Serial.o(i._ZN4mbed6SerialD1Ev)
 <LI><a href="#[88]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[85]">mbed::FileLike::lock()</a> from Stream.o(i._ZN4mbed8FileLike4lockEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[86]">mbed::FileLike::unlock()</a> from Stream.o(i._ZN4mbed8FileLike6unlockEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[58]">mbed::donothing()</a> from SerialBase.o(i._ZN4mbed9donothingEv) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[8f]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[95]">std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[94]">std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[55]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[55]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
 <LI><a href="#[8c]">std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</a> from char.o(i._ZNSt12ctype_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[8b]">std::ctype_byname&lang;char&rang;::~ctype_byname()</a> from char.o(i._ZNSt12ctype_bynameIcED1Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[8e]">std::__rw_exception::~__rw_exception()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[6f]">std::__rw_open_cat_data::__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataC1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[6e]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[6e]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
 <LI><a href="#[8d]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[8d]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[91]">std::ctype&lang;char&rang;::~ctype__deallocating()</a> from char.o(i._ZNSt5ctypeIcED0Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[90]">std::ctype&lang;char&rang;::~ctype()</a> from char.o(i._ZNSt5ctypeIcED1Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[89]">std::locale::facet::~facet__deallocating()</a> from rwstdexcept.o(i._ZNSt6locale5facetD0Ev) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[5c]">std::locale::~locale()</a> from locale.o(i._ZNSt6localeD1Ev) referenced from locale.o(i._ZNSt6locale7classicEv)
 <LI><a href="#[93]">std::messages&lang;char&rang;::~messages__deallocating()</a> from rwstdexcept.o(i._ZNSt8messagesIcED0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[92]">std::messages&lang;char&rang;::~messages()</a> from rwstdexcept.o(i._ZNSt8messagesIcED1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[81]">thunk{-48} to mbed::Serial::lock()</a> from Serial.o(i._ZThn48_N4mbed6Serial4lockEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[83]">thunk{-48} to mbed::Serial::_putc(int)</a> from Serial.o(i._ZThn48_N4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[82]">thunk{-48} to mbed::Serial::unlock()</a> from Serial.o(i._ZThn48_N4mbed6Serial6unlockEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[5e]">operator delete[] (void*)</a> from mbed_retarget.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9e]">__main</a> from __main.o(!!!main) referenced from startup_LPC17xx.o(.text)
 <LI><a href="#[9b]">__sti___10_locale_cpp_ff99fc7b</a> from locale.o(i.__sti___10_locale_cpp_ff99fc7b) referenced from locale.o(.init_array)
 <LI><a href="#[9c]">__sti___10_rwcats_cpp_64e8068e</a> from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e) referenced from rwcats.o(.init_array)
 <LI><a href="#[9a]">__sti___8_char_cpp_a3dc957a</a> from char.o(i.__sti___8_char_cpp_a3dc957a) referenced from char.o(.init_array)
 <LI><a href="#[99]">__sti___8_main_cpp_main</a> from main.o(i.__sti___8_main_cpp_main) referenced from main.o(.init_array)
 <LI><a href="#[53]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4e]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[51]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4d]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[4b]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[4c]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[50]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[52]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[69]">uart0_irq</a> from serial_api.o(i.uart0_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[6a]">uart1_irq</a> from serial_api.o(i.uart1_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[6b]">uart2_irq</a> from serial_api.o(i.uart2_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[6c]">uart3_irq</a> from serial_api.o(i.uart3_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[74]">us_ticker_clear_interrupt</a> from us_ticker.o(i.us_ticker_clear_interrupt) referenced from mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[73]">us_ticker_disable_interrupt</a> from us_ticker.o(i.us_ticker_disable_interrupt) referenced from mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[71]">us_ticker_init</a> from us_ticker.o(i.us_ticker_init) referenced from mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[6d]">us_ticker_irq_handler</a> from mbed_us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_init)
 <LI><a href="#[6d]">us_ticker_irq_handler</a> from mbed_us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_read)
 <LI><a href="#[72]">us_ticker_read</a> from us_ticker.o(i.us_ticker_read) referenced from mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[75]">us_ticker_set_interrupt</a> from us_ticker.o(i.us_ticker_set_interrupt) referenced from mbed_us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[213]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[214]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[215]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a4]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[e7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a6]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[a8]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ab]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ac]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[216]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[ae]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b2]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b4]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b6]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b8]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b9]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ba]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[bc]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[217]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[be]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c0]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[c2]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c4]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[218]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[219]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[21a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[21c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[21f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[220]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[221]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[222]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[223]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[224]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[225]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[226]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[227]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[228]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[229]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[22a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a1]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[22e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[d4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick() &rArr; std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[231]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[232]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[dc]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[dd]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c89vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[234]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[e1]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[e2]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b5]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[bd]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a7]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e5]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e8]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[ea]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[ec]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[ef]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[f0]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[f1]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f4]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[f6]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[f2]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1a0]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerTransCallback(void*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerPvwCallback(void*, unsigned)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerPgmCallback(void*, unsigned)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerLedCallback(void*, std::bitset&lang;(unsigned)16&rang;)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerCutCallback(void*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerButCallback(void*, std::bitset&lang;(unsigned)24&rang;)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
</UL>

<P><STRONG><a name="[238]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1a8]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[fc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[239]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName, int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[9f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[da]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[18]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[100]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c7]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[103]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[106]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[107]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[108]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e4]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[e3]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[a5]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[e0]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>

<P><STRONG><a name="[10a]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[b7]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[10d]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b3]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[bb]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[10e]"></a>sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[eb]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[10f]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[138]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e9]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[4d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[113]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[115]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[109]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[116]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1e0]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[240]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _sys_istty
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[241]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[118]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[11b]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ed]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[117]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ce]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[120]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[fb]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[123]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[182]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[171]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1bf]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[126]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[242]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_vec_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aeabi_vec_delete_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[150]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[122]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[12b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[ff]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[10c]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[243]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[134]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[135]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[bf]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[c1]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[136]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c3]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[c5]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[110]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[13d]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[114]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[11c]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[244]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>setlocale</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, locale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>

<P><STRONG><a name="[112]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[10b]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[125]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[121]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[11f]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[101]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[124]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[fa]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, assert_stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[147]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[128]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[247]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[fe]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[149]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[14a]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[c9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_mixed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[248]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[133]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[12d]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[142]"></a>_setlocale_r</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>

<P><STRONG><a name="[146]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[143]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[144]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[145]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1cb]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[14c]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[249]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[152]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[153]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[212]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[24b]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[12e]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[157]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[156]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[15a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[158]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[159]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[12f]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13c]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[130]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13b]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[15b]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[d7]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbed_retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick() &rArr; std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, system_LPC17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>catgets(__rw::__rw_cat*, int, int, const char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rwcats.o(i._Z7catgetsPN4__rw8__rw_catEiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
</UL>

<P><STRONG><a name="[163]"></a>catopen(const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rwcats.o(i._Z7catopenPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = catopen(const char*, int) &rArr; operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[1ee]"></a>MixerController::setCutCallback(void(*)(void*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController14setCutCallbackEPFvPvE))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f1]"></a>MixerController::setLedCallback(void(*)(void*, std::bitset&lang;(unsigned)16&rang;))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController14setLedCallbackEPFvPvSt6bitsetILj16EEE))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ea]"></a>MixerController::setCutUserPointer(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController17setCutUserPointerEPv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f0]"></a>MixerController::setLedUserPointer(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController17setLedUserPointerEPv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ed]"></a>MixerController::setPreviewCallback(void(*)(void*, unsigned))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController18setPreviewCallbackEPFvPvjE))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ec]"></a>MixerController::setProgramCallback(void(*)(void*, unsigned))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController18setProgramCallbackEPFvPvjE))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e9]"></a>MixerController::setPreviewUserPointer(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController21setPreviewUserPointerEPv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e8]"></a>MixerController::setProgramUserPointer(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController21setProgramUserPointerEPv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ef]"></a>MixerController::setTransitionCallback(void(*)(void*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController21setTransitionCallbackEPFvPvE))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1eb]"></a>MixerController::setTransitionUserPointer(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixercontroller.o(i._ZN15MixerController24setTransitionUserPointerEPv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15f]"></a>MixerController::process(std::bitset&lang;(unsigned)24&rang;)</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, mixercontroller.o(i._ZN15MixerController7processESt6bitsetILj24EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = MixerController::process(std::bitset&lang;(unsigned)24&rang;) &rArr; unsigned firstOne&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, unsigned, unsigned) &rArr; std::bitset&lang;(unsigned)24&rang;::test(unsigned) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::swap&lang;unsigned&rang;(T1&, T1&)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::flip()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)16&rang;::set(unsigned, bool)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::test(unsigned) const
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned firstOne&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, unsigned, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;T1&rang; getRisingEdge&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, const std::bitset&lang;T1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerButCallback(void*, std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[1d6]"></a>MixerController::MixerController(void*, void(*)(void*, std::bitset&lang;(unsigned)16&rang;), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, mixercontroller.o(i._ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MixerController::MixerController(void*, void(*)(void*, std::bitset&lang;(unsigned)16&rang;), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_main
</UL>

<P><STRONG><a name="[24c]"></a>MixerController::MixerController__sub_object(void*, void(*)(void*, std::bitset&lang;(unsigned)16&rang;), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))</STRONG> (Thumb, 0 bytes, Stack size 36 bytes, mixercontroller.o(i._ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_), UNUSED)

<P><STRONG><a name="[175]"></a>__rw::__rw_throw(int, ...)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rwstdexcept.o(i._ZN4__rw10__rw_throwEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)16&rang;::set(unsigned, bool)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::test(unsigned) const
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[178]"></a>__rw::__rw_allocate(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rwalloc.o(i._ZN4__rw13__rw_allocateEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __rw::__rw_allocate(unsigned, int) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[179]"></a>__rw::__rw_deallocate(void*, unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwalloc.o(i._ZN4__rw15__rw_deallocateEPvji))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[8a]"></a>__rw::__rw_facet_base::_C_initfacet(const std::locale&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale))
<BR>[Address Reference Count : 2]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
<LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[17a]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[24d]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const char*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj), UNUSED)

<P><STRONG><a name="[17e]"></a>__rw::__rw_locale_imp::~__rw_locale_imp()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>

<P><STRONG><a name="[24e]"></a>__rw::__rw_locale_imp::~__rw_locale_imp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev), UNUSED)

<P><STRONG><a name="[181]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[24f]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale__sub_object(const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci), UNUSED)

<P><STRONG><a name="[183]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[250]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev), UNUSED)

<P><STRONG><a name="[9d]"></a>__rw::__rw_throw_exception_noex(int, char*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw_exception_noex(int, char*) &rArr; fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_noex.o(.data)
</UL>
<P><STRONG><a name="[162]"></a>__rw::__catfind(__rw::__rw_cat*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwcats.o(i._ZN4__rw9__catfindEPNS_8__rw_catE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
</UL>

<P><STRONG><a name="[184]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::write(int) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[185]"></a>mbed::DigitalOut::DigitalOut(PinName, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinNamei))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName, int) &rArr; gpio_init_out_ex &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;)
</UL>

<P><STRONG><a name="[251]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinNamei), UNUSED)

<P><STRONG><a name="[187]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::operator =(int) &rArr; mbed::DigitalOut::write(int) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
</UL>

<P><STRONG><a name="[188]"></a>mbed::DigitalOut::operator int()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN4mbed10DigitalOutcviEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::operator int() &rArr; gpio_read(gpio_t*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
</UL>

<P><STRONG><a name="[189]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-48} to mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[59]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[18b]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[76]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[18d]"></a>mbed::SerialBase::format(int, mbed::SerialBase::Parity, int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, SerialBase.o(i._ZN4mbed10SerialBase6formatEiNS0_6ParityEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::format(int, mbed::SerialBase::Parity, int) &rArr; serial_format &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[77]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[18f]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[252]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[5a]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[193]"></a>mbed::TimerEvent::insert(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6insertEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::TimerEvent::insert(unsigned) &rArr; ticker_insert_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>

<P><STRONG><a name="[195]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>

<P><STRONG><a name="[197]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_main
</UL>

<P><STRONG><a name="[253]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[78]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; ticker_remove_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[19a]"></a>mbed::remove_filehandle(mbed::FileLike*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mbed_retarget.o(i._ZN4mbed17remove_filehandleEPNS_8FileLikeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::remove_filehandle(mbed::FileLike*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[19b]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed_retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[7a]"></a>mbed::Serial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Serial.o(i._ZN4mbed6Serial4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[7b]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Serial.o(i._ZN4mbed6Serial6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[19c]"></a>mbed::Serial::Serial(PinName, PinName, const char*, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_main
</UL>

<P><STRONG><a name="[254]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[60]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileLike*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_main)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[255]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[80]"></a>mbed::Stream::size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7d]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7c]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7e]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[160]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerTransCallback(void*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerPvwCallback(void*, unsigned)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerPgmCallback(void*, unsigned)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerCutCallback(void*)
</UL>

<P><STRONG><a name="[19d]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[256]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[84]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileLike*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1a1]"></a>mbed::Ticker::setup(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, Ticker.o(i._ZN4mbed6Ticker5setupEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::Ticker::setup(unsigned) &rArr; mbed::TimerEvent::insert(unsigned) &rArr; ticker_insert_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned)
</UL>

<P><STRONG><a name="[87]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[1a5]"></a>mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, main.o(i._ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned) &rArr; mbed::Ticker::setup(unsigned) &rArr; mbed::TimerEvent::insert(unsigned) &rArr; ticker_insert_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[61]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::TimerEvent::~TimerEvent__sub_object() &rArr; ticker_remove_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_main)
<LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[257]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[1aa]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
</UL>

<P><STRONG><a name="[1a6]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[19f]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::FileBase(const char*, mbed::PathType) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[258]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[88]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileLike*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileLike*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[259]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[85]"></a>mbed::FileLike::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed8FileLike4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[86]"></a>mbed::FileLike::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed8FileLike6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1a9]"></a>mbed::FilePath::file()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1db]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1ab]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1ac]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[25a]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[8f]"></a>std::__rw_exception::what() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[1ad]"></a>std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[1b1]"></a>std::__rw_messages_base::_C_get_locale(int) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, messages.o(i._ZNKSt18__rw_messages_base13_C_get_localeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_get_locale(int) const &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[1b3]"></a>std::__rw_messages_base::_C_get_message(int, int, int) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, messages.o(i._ZNKSt18__rw_messages_base14_C_get_messageEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__rw_messages_base::_C_get_message(int, int, int) const &rArr; catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[1be]"></a>std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE2isENSt10ctype_base4maskEc))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[1b4]"></a>std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, locale.o(i._ZNKSt6locale13_C_make_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[1b7]"></a>std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale16_C_install_facetEPN4__rw15__rw_facet_baseERKNS_2idE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const &rArr; __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[1b8]"></a>std::locale::name() const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale4nameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[1b9]"></a>std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(i._ZNSt11char_traitsIcE4copyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[1ba]"></a>std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, char.o(i._ZNSt12ctype_bynameIcE17_C_get_mask_tableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[1bc]"></a>std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[25b]"></a>std::ctype_byname&lang;char&rang;::ctype_byname__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj), UNUSED)

<P><STRONG><a name="[8c]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating() &rArr; std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[8b]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[25c]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev), UNUSED)

<P><STRONG><a name="[177]"></a>std::__rw_exception::_C_vformat(int, std::__va_list)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[176]"></a>std::__rw_exception::__rw_exception()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_exception::__rw_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[25d]"></a>std::__rw_exception::__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[8e]"></a>std::__rw_exception::~__rw_exception()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[25e]"></a>std::__rw_exception::~__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[1c1]"></a>std::__rw_messages_base::~__rw_messages_base()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>

<P><STRONG><a name="[25f]"></a>std::__rw_messages_base::~__rw_messages_base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev), UNUSED)

<P><STRONG><a name="[6f]"></a>std::__rw_open_cat_data::__rw_open_cat_data()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
</UL>
<P><STRONG><a name="[260]"></a>std::__rw_open_cat_data::__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev), UNUSED)

<P><STRONG><a name="[6e]"></a>std::__rw_open_cat_data::~__rw_open_cat_data()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::__rw_open_cat_data::~__rw_open_cat_data() &rArr; std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
<LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
</UL>
<P><STRONG><a name="[261]"></a>std::__rw_open_cat_data::~__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev), UNUSED)

<P><STRONG><a name="[1c3]"></a>std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&) &rArr; std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[8d]"></a>std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = std::ctype&lang;char&rang;::_C_initfacet(const std::locale&) &rArr; std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[1bd]"></a>std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[262]"></a>std::ctype&lang;char&rang;::ctype__sub_object(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj), UNUSED)

<P><STRONG><a name="[91]"></a>std::ctype&lang;char&rang;::~ctype__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::ctype&lang;char&rang;::~ctype__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[90]"></a>std::ctype&lang;char&rang;::~ctype()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[263]"></a>std::ctype&lang;char&rang;::~ctype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev), UNUSED)

<P><STRONG><a name="[89]"></a>std::locale::facet::~facet__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt6locale5facetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::locale::facet::~facet__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[1c4]"></a>std::locale::_C_init()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, locale.o(i._ZNSt6locale7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[1b2]"></a>std::locale::classic()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, locale.o(i._ZNSt6locale7classicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[1b6]"></a>std::locale::locale(__rw::__rw_locale_imp*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[264]"></a>std::locale::locale__sub_object(__rw::__rw_locale_imp*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE), UNUSED)

<P><STRONG><a name="[1c2]"></a>std::locale::locale(const std::locale&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[265]"></a>std::locale::locale__sub_object(const std::locale&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_), UNUSED)

<P><STRONG><a name="[174]"></a>std::locale::locale()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = std::locale::locale() &rArr;  std::locale::_C_init() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[266]"></a>std::locale::locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev), UNUSED)

<P><STRONG><a name="[5c]"></a>std::locale::~locale()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZNSt6locale7classicEv)
</UL>
<P><STRONG><a name="[267]"></a>std::locale::~locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev), UNUSED)

<P><STRONG><a name="[1b0]"></a>std::locale::operator =(const std::locale&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
</UL>

<P><STRONG><a name="[93]"></a>std::messages&lang;char&rang;::~messages__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::messages&lang;char&rang;::~messages__deallocating() &rArr; std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[92]"></a>std::messages&lang;char&rang;::~messages()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[268]"></a>std::messages&lang;char&rang;::~messages__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev), UNUSED)

<P><STRONG><a name="[1c0]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
</UL>

<P><STRONG><a name="[269]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[1ae]"></a>std::__rw_get_cats()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, messages.o(i._ZSt13__rw_get_catsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_get_cats()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[81]"></a>thunk{-48} to mbed::Serial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Serial.o(i._ZThn48_N4mbed6Serial4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[83]"></a>thunk{-48} to mbed::Serial::_putc(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, Serial.o(i._ZThn48_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = thunk{-48} to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[82]"></a>thunk{-48} to mbed::Serial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, Serial.o(i._ZThn48_N4mbed6Serial6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[5e]"></a>operator delete[] (void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed_retarget.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[165]"></a>operator delete (void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed_retarget.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::~facet__deallocating()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>

<P><STRONG><a name="[16f]"></a>operator new[] (unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mbed_retarget.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[164]"></a>operator new(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mbed_retarget.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
</UL>

<P><STRONG><a name="[1c9]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[132]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1cc]"></a>__NVIC_SetVector</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_nvic.o(i.__NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __NVIC_SetVector &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set_internal
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_atexit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_vec_new_cookie</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aeabi_vec_new_cookie.o(i.__aeabi_vec_new_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c6]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[79]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1cd]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>

<P><STRONG><a name="[1ce]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[1d0]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[140]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1d1]"></a>__mathlib_tofloat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[155]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[d1]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[d3]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbed_retarget.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[f8]"></a>_sys_close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_close
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[119]"></a>_sys_flen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[11a]"></a>_sys_istty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_istty
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[f3]"></a>_sys_open</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[11d]"></a>_sys_seek</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[11e]"></a>_sys_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1a2]"></a>core_util_critical_section_enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mbed_critical.o(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>

<P><STRONG><a name="[1a4]"></a>core_util_critical_section_exit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbed_critical.o(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>

<P><STRONG><a name="[1c8]"></a>error</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, mbed_error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[d8]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_exit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1d2]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[198]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed_us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[1e1]"></a>gpio_dir</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = gpio_dir &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[1e2]"></a>gpio_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[1e4]"></a>gpio_init_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbed_gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;)
</UL>

<P><STRONG><a name="[1e6]"></a>gpio_init_out</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mbed_gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = gpio_init_out &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[186]"></a>gpio_init_out_ex</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mbed_gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = gpio_init_out_ex &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName, int)
</UL>

<P><STRONG><a name="[1e5]"></a>gpio_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[1d9]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[15d]"></a>$Super$$main</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick() &rArr; std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::format(int, mbed::SerialBase::Parity, int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setTransitionUserPointer(void*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setTransitionCallback(void(*)(void*))
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setProgramUserPointer(void*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setPreviewUserPointer(void*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setProgramCallback(void(*)(void*, unsigned))
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setPreviewCallback(void(*)(void*, unsigned))
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setLedUserPointer(void*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setCutUserPointer(void*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setLedCallback(void(*)(void*, std::bitset&lang;(unsigned)16&rang;))
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::setCutCallback(void(*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>mbed_assert_internal</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mbed_assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileLike*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>

<P><STRONG><a name="[1df]"></a>mbed_die</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[1f3]"></a>mbed_error_printf</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[1dc]"></a>mbed_error_vfprintf</STRONG> (Thumb, 70 bytes, Stack size 144 bytes, mbed_board.o(i.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1dd]"></a>mbed_interface_connected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed_interface.o(i.mbed_interface_connected))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15c]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed_retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>mbed_sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed_retarget.o(i.mbed_sdk_init))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[1e3]"></a>pin_function</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[1e7]"></a>pin_mode</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[1fb]"></a>pinmap_find_peripheral</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbed_pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[1f6]"></a>pinmap_merge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mbed_pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = pinmap_merge &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1f7]"></a>pinmap_peripheral</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mbed_pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1f8]"></a>pinmap_pinout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mbed_pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = pinmap_pinout &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1f5]"></a>semihost_connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed_semihost_api.o(i.semihost_connected))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>

<P><STRONG><a name="[1de]"></a>semihost_exit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, mbed_semihost_api.o(i.semihost_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = semihost_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18c]"></a>serial_baud</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = serial_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[18e]"></a>serial_format</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, serial_api.o(i.serial_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = serial_format &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::format(int, mbed::SerialBase::Parity, int)
</UL>

<P><STRONG><a name="[191]"></a>serial_init</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[192]"></a>serial_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[18a]"></a>serial_putc</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[1f9]"></a>serial_set_flow_control</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, serial_api.o(i.serial_set_flow_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = serial_set_flow_control &rArr; pinmap_pinout &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[194]"></a>ticker_insert_event</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mbed_ticker_api.o(i.ticker_insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ticker_insert_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>

<P><STRONG><a name="[1fd]"></a>ticker_irq_handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mbed_ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[1a3]"></a>ticker_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed_ticker_api.o(i.ticker_read))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
</UL>

<P><STRONG><a name="[196]"></a>ticker_remove_event</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mbed_ticker_api.o(i.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ticker_remove_event &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[199]"></a>ticker_set_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mbed_ticker_api.o(i.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[69]"></a>uart0_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[6a]"></a>uart1_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[6b]"></a>uart2_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[6c]"></a>uart3_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart3_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[74]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>us_ticker_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_init &rArr; __NVIC_SetVector &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>us_ticker_irq_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed_us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler &rArr; ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> us_ticker.o(i.us_ticker_init)
<LI> us_ticker.o(i.us_ticker_read)
</UL>
<P><STRONG><a name="[72]"></a>us_ticker_read</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_read &rArr; __NVIC_SetVector &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mbed_wait_api_no_rtos.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; __NVIC_SetVector &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[53]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[1a7]"></a>SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, FileBase.o(t._ZN12SingletonPtrI13PlatformMutexEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[1f2]"></a>SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, main.o(t._ZN17SerialInSerialOutILj24ELj16EE4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick() &rArr; std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d7]"></a>SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, main.o(t._ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;) &rArr; mbed::DigitalOut::DigitalOut(PinName, int) &rArr; gpio_init_out_ex &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName, int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_main
</UL>

<P><STRONG><a name="[26a]"></a>SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut__sub_object(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(t._ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE), UNUSED)

<P><STRONG><a name="[206]"></a>__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(t._ZN4__rw12__string_refIcSt11char_traitsIcESaIcEE10_C_inc_refEv))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[70]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
</UL>
<P><STRONG><a name="[1b5]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEE6resizeEjRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>

<P><STRONG><a name="[17f]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[26b]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev), UNUSED)

<P><STRONG><a name="[5f]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
</UL>
<P><STRONG><a name="[26c]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[180]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[26d]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev), UNUSED)

<P><STRONG><a name="[1af]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[5d]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZSt13__rw_get_catsv)
</UL>
<P><STRONG><a name="[26e]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev), UNUSED)

<P><STRONG><a name="[96]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, SerialBase.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[98]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, SerialBase.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[97]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, SerialBase.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[1d8]"></a>mbed::Callback&lang;void()&rang;::Callback(void(*)())</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_main
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[26f]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_), UNUSED)

<P><STRONG><a name="[5b]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, Serial.o(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(i._ZN4mbed6SerialD1Ev)
</UL>
<P><STRONG><a name="[270]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[16b]"></a>std::bitset&lang;(unsigned)24&rang;::test(unsigned) const</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mixercontroller.o(t._ZNKSt6bitsetILj24EE4testEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = std::bitset&lang;(unsigned)24&rang;::test(unsigned) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned firstOne&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, unsigned, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[95]"></a>std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[94]"></a>std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[1ff]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, locale.o(t._ZNSs11_C_allocateEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[202]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, locale.o(t._ZNSs7replaceEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[203]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, char.o(t._ZNSs7replaceEjjPKcjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[201]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, char.o(t._ZNSs9_C_getRepEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[204]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, char.o(t._ZNSs9_C_unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[172]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
</UL>

<P><STRONG><a name="[271]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE), UNUSED)

<P><STRONG><a name="[15e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[272]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE), UNUSED)

<P><STRONG><a name="[173]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[273]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs), UNUSED)

<P><STRONG><a name="[55]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
</UL>
<P><STRONG><a name="[274]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev), UNUSED)

<P><STRONG><a name="[1c5]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[17d]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16d]"></a>std::bitset&lang;(unsigned)16&rang;::set(unsigned, bool)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mixercontroller.o(t._ZNSt6bitsetILj16EE3setEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = std::bitset&lang;(unsigned)16&rang;::set(unsigned, bool) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[1fe]"></a>std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(t._ZNSt6bitsetILj24EE3setEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = std::bitset&lang;(unsigned)24&rang;::set(unsigned, bool) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
</UL>

<P><STRONG><a name="[168]"></a>std::bitset&lang;(unsigned)24&rang;::flip()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mixercontroller.o(t._ZNSt6bitsetILj24EE4flipEv))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;T1&rang; getRisingEdge&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, const std::bitset&lang;T1&rang;&)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[200]"></a>const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(t._ZSt3maxIjERKT_S2_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16c]"></a>void std::swap&lang;unsigned&rang;(T1&, T1&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mixercontroller.o(t._ZSt4swapIjEvRT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[207]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20a]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[20d]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[20c]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[20e]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[210]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[209]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[20f]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[208]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[16]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a9]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[ad]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[20b]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1cf]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[137]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[13f]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[13e]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[211]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1fa]"></a>serial_irq_set_internal</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, serial_api.o(i.serial_irq_set_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_irq_set_internal &rArr; __NVIC_SetVector &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[1fc]"></a>uart_irq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, serial_api.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq
</UL>

<P><STRONG><a name="[67]"></a>mixerButCallback(void*, std::bitset&lang;(unsigned)24&rang;)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i._Z16mixerButCallbackPvSt6bitsetILj24EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = mixerButCallback(void*, std::bitset&lang;(unsigned)24&rang;) &rArr; MixerController::process(std::bitset&lang;(unsigned)24&rang;) &rArr; unsigned firstOne&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, unsigned, unsigned) &rArr; std::bitset&lang;(unsigned)24&rang;::test(unsigned) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[64]"></a>mixerCutCallback(void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i._Z16mixerCutCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mixerCutCallback(void*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[66]"></a>mixerLedCallback(void*, std::bitset&lang;(unsigned)16&rang;)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i._Z16mixerLedCallbackPvSt6bitsetILj16EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mixerLedCallback(void*, std::bitset&lang;(unsigned)16&rang;) &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[62]"></a>mixerPgmCallback(void*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._Z16mixerPgmCallbackPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mixerPgmCallback(void*, unsigned) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[63]"></a>mixerPvwCallback(void*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._Z16mixerPvwCallbackPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mixerPvwCallback(void*, unsigned) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[68]"></a>serialIOClkEvent()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z16serialIOClkEventv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[65]"></a>mixerTransCallback(void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i._Z18mixerTransCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mixerTransCallback(void*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[166]"></a>gpio_read(gpio_t*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i._Z9gpio_readP6gpio_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = gpio_read(gpio_t*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::tick()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
</UL>

<P><STRONG><a name="[99]"></a>__sti___8_main_cpp_main</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, main.o(i.__sti___8_main_cpp_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_main &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInSerialOut&lang;(unsigned)24, (unsigned)16&rang;::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset&lang;(unsigned)24&rang;), std::bitset&lang;(unsigned)16&rang;)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::MixerController(void*, void(*)(void*, std::bitset&lang;(unsigned)16&rang;), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[169]"></a>std::bitset&lang;T1&rang; getRisingEdge&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, const std::bitset&lang;T1&rang;&)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mixercontroller.o(t._Z13getRisingEdgeILj24EESt6bitsetIXT_EERKS0_IXT_EERKS0_IXT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bitset&lang;T1&rang; getRisingEdge&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, const std::bitset&lang;T1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::flip()
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[16a]"></a>unsigned firstOne&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, unsigned, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mixercontroller.o(t._Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = unsigned firstOne&lang;(unsigned)24&rang;(const std::bitset&lang;T1&rang;&, unsigned, unsigned) &rArr; std::bitset&lang;(unsigned)24&rang;::test(unsigned) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bitset&lang;(unsigned)24&rang;::test(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerController::process(std::bitset&lang;(unsigned)24&rang;)
</UL>

<P><STRONG><a name="[57]"></a>&lang;Func1&rang;</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SerialBase.o(i.<Func1>))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[58]"></a>mbed::donothing()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed9donothingEv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[16e]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list) &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[170]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[4f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>__sti___8_char_cpp_a3dc957a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp_a3dc957a))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[56]"></a>&lang;Func5&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, locale.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func5&rang; &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
</UL>
<P><STRONG><a name="[9b]"></a>__sti___10_locale_cpp_ff99fc7b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp_ff99fc7b))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[12c]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[139]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9c]"></a>__sti___10_rwcats_cpp_64e8068e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp_64e8068e))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __sti___10_rwcats_cpp_64e8068e &rArr; operator new[] (unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL>
<P><STRONG><a name="[54]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>_locale_name</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_mixed
</UL>

<P><STRONG><a name="[14f]"></a>_set_locale_mixed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, locale_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[14e]"></a>_set_locale_byname</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
