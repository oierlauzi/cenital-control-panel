; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --gnu -o.\build\main.o --asm_dir=.\listings\ --list_dir=.\listings\ --depend=.\build\main.d --cpu=Cortex-M3 --apcs=interwork/interwork -O0 --diag_suppress=9931,951,1361 --preinclude=mbed/mbed_config.h -I. -Imbed/. -Imbed/TARGET_LPC1768 -Imbed/TARGET_LPC1768/TARGET_NXP -Imbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X -Imbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/TARGET_MBED_LPC1768 -Imbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/device -Imbed/TARGET_LPC1768/TOOLCHAIN_ARM_STD -Imbed/drivers -Imbed/hal -Imbed/platform -DDEVICE_RTC=1 -DDEVICE_SLEEP=1 -DTOOLCHAIN_object -DTOOLCHAIN_ARM_STD -DDEVICE_SEMIHOST=1 -DFEATURE_LWIP=1 -D__ASSERT_MSG -DTARGET_LPC1768 -DTARGET_RELEASE -DDEVICE_PORTINOUT=1 -D__CORTEX_M3 -DDEVICE_DEBUG_AWARENESS=1 -DTARGET_M3 -DDEVICE_CAN=1 -DDEVICE_PORTOUT=1 -DDEVICE_STDIO_MESSAGES=1 -DDEVICE_ANALOGOUT=1 -DARM_MATH_CM3 -DTARGET_LIKE_CORTEX_M3 -DDEVICE_ANALOGIN=1 -DDEVICE_PORTIN=1 -DTARGET_CORTEX_M -DDEVICE_ERROR_PATTERN=1 -DMBED_BUILD_TIMESTAMP=1497285907.81 -DDEVICE_ETHERNET=1 -DTARGET_LPCTarget -DDEVICE_I2C=1 -DTOOLCHAIN_ARM -DDEVICE_INTERRUPTIN=1 -DTARGET_UVISOR_UNSUPPORTED -DDEVICE_PWMOUT=1 -DTARGET_LIKE_MBED -DDEVICE_SPI=1 -D__MBED__=1 -DDEVICE_SPISLAVE=1 -DDEVICE_SERIAL_FC=1 -DDEVICE_LOCALFILESYSTEM=1 -DDEVICE_SERIAL=1 -DTARGET_LPC176X -DDEVICE_I2CSLAVE=1 -D__CMSIS_RTOS -DTARGET_NXP -DTARGET_MBED_LPC1768 -D__MBED_CMSIS_RTOS_CM -D__UVISION_VERSION=528 -DLPC175x_6x --omf_browse=.\build\main.crf --no_depend_system_headers --no_rtti main.cpp]
                          THUMB

                          AREA ||i._Z16mixerButCallbackPvSt6bitsetILj24EE||, CODE, READONLY, ALIGN=2

                  _Z16mixerButCallbackPvSt6bitsetILj24EE PROC ; mixerButCallback(void*, std::bitset<(unsigned)24>)
;;;44     //Funciones que enlazan modulos
;;;45     static void mixerButCallback(void* usrPtr, MixerController::ButtonState but) {
000000  b513              PUSH     {r0,r1,r4,lr}
000002  4604              MOV      r4,r0
;;;46     	assert(usrPtr);
000004  b104              CBZ      r4,|L1.8|
000006  e004              B        |L1.18|
                  |L1.8|
000008  222e              MOVS     r2,#0x2e
00000a  a104              ADR      r1,|L1.28|
00000c  a006              ADR      r0,|L1.40|
00000e  f7fffffe          BL       __aeabi_assert
                  |L1.18|
;;;47     	static_cast<MixerController*>(usrPtr)->process(but);
000012  4620              MOV      r0,r4
000014  9901              LDR      r1,[sp,#4]
000016  f7fffffe          BL       _ZN15MixerController7processESt6bitsetILj24EE ; MixerController::process(std::bitset<(unsigned)24>)
;;;48     }
00001a  bd1c              POP      {r2-r4,pc}
;;;49     
                          ENDP

                  |L1.28|
00001c  6d61696e          DCB      "main.cpp",0
000020  2e637070
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
                  |L1.40|
000028  75737250          DCB      "usrPtr",0
00002c  747200  
00002f  00                DCB      0

                          AREA ||i._Z16mixerCutCallbackPv||, CODE, READONLY, ALIGN=2

                  _Z16mixerCutCallbackPv PROC ; mixerCutCallback(void*)
;;;64     
;;;65     static void mixerCutCallback(void* usrPtr) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;66     	assert(usrPtr);
000004  b104              CBZ      r4,|L2.8|
000006  e004              B        |L2.18|
                  |L2.8|
000008  2242              MOVS     r2,#0x42
00000a  a105              ADR      r1,|L2.32|
00000c  a007              ADR      r0,|L2.44|
00000e  f7fffffe          BL       __aeabi_assert
                  |L2.18|
;;;67     	static_cast<Serial*>(usrPtr)->printf("cut\n");
000012  a108              ADR      r1,|L2.52|
000014  f1040030          ADD      r0,r4,#0x30
000018  f7fffffe          BL       _ZN4mbed6Stream6printfEPKcz ; mbed::Stream::printf(const char*, ...)
;;;68     }
00001c  bd10              POP      {r4,pc}
;;;69     
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
000020  6d61696e          DCB      "main.cpp",0
000024  2e637070
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L2.44|
00002c  75737250          DCB      "usrPtr",0
000030  747200  
000033  00                DCB      0
                  |L2.52|
000034  6375740a          DCB      "cut\n",0
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i._Z16mixerLedCallbackPvSt6bitsetILj16EE||, CODE, READONLY, ALIGN=2

                  _Z16mixerLedCallbackPvSt6bitsetILj16EE PROC ; mixerLedCallback(void*, std::bitset<(unsigned)16>)
;;;49     
;;;50     static void mixerLedCallback(void* usrPtr, MixerController::LedState led) {
000000  b513              PUSH     {r0,r1,r4,lr}
000002  4604              MOV      r4,r0
;;;51     	assert(usrPtr);
000004  b104              CBZ      r4,|L3.8|
000006  e004              B        |L3.18|
                  |L3.8|
000008  2233              MOVS     r2,#0x33
00000a  a105              ADR      r1,|L3.32|
00000c  a007              ADR      r0,|L3.44|
00000e  f7fffffe          BL       __aeabi_assert
                  |L3.18|
;;;52     	static_cast<SerialInterface*>(usrPtr)->setOutputData(led);
000012  bf00              NOP      
000014  2084              MOVS     r0,#0x84
000016  9901              LDR      r1,[sp,#4]
000018  5101              STR      r1,[r0,r4]
00001a  bf00              NOP      
;;;53     }
00001c  bd1c              POP      {r2-r4,pc}
;;;54     
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
000020  6d61696e          DCB      "main.cpp",0
000024  2e637070
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L3.44|
00002c  75737250          DCB      "usrPtr",0
000030  747200  
000033  00                DCB      0

                          AREA ||i._Z16mixerPgmCallbackPvj||, CODE, READONLY, ALIGN=2

                  _Z16mixerPgmCallbackPvj PROC ; mixerPgmCallback(void*, unsigned)
;;;54     
;;;55     static void mixerPgmCallback(void* usrPtr, size_t sig) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;56     	assert(usrPtr);
000006  b104              CBZ      r4,|L4.10|
000008  e004              B        |L4.20|
                  |L4.10|
00000a  2238              MOVS     r2,#0x38
00000c  a105              ADR      r1,|L4.36|
00000e  a008              ADR      r0,|L4.48|
000010  f7fffffe          BL       __aeabi_assert
                  |L4.20|
;;;57     	static_cast<Serial*>(usrPtr)->printf("pgm %u\n", sig);
000014  462a              MOV      r2,r5
000016  a108              ADR      r1,|L4.56|
000018  f1040030          ADD      r0,r4,#0x30
00001c  f7fffffe          BL       _ZN4mbed6Stream6printfEPKcz ; mbed::Stream::printf(const char*, ...)
;;;58     }
000020  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
000024  6d61696e          DCB      "main.cpp",0
000028  2e637070
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L4.48|
000030  75737250          DCB      "usrPtr",0
000034  747200  
000037  00                DCB      0
                  |L4.56|
000038  70676d20          DCB      "pgm %u\n",0
00003c  25750a00

                          AREA ||i._Z16mixerPvwCallbackPvj||, CODE, READONLY, ALIGN=2

                  _Z16mixerPvwCallbackPvj PROC ; mixerPvwCallback(void*, unsigned)
;;;59     
;;;60     static void mixerPvwCallback(void* usrPtr, size_t sig) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;61     	assert(usrPtr);
000006  b104              CBZ      r4,|L5.10|
000008  e004              B        |L5.20|
                  |L5.10|
00000a  223d              MOVS     r2,#0x3d
00000c  a105              ADR      r1,|L5.36|
00000e  a008              ADR      r0,|L5.48|
000010  f7fffffe          BL       __aeabi_assert
                  |L5.20|
;;;62     	static_cast<Serial*>(usrPtr)->printf("pvw %u\n", sig);
000014  462a              MOV      r2,r5
000016  a108              ADR      r1,|L5.56|
000018  f1040030          ADD      r0,r4,#0x30
00001c  f7fffffe          BL       _ZN4mbed6Stream6printfEPKcz ; mbed::Stream::printf(const char*, ...)
;;;63     }
000020  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
000024  6d61696e          DCB      "main.cpp",0
000028  2e637070
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L5.48|
000030  75737250          DCB      "usrPtr",0
000034  747200  
000037  00                DCB      0
                  |L5.56|
000038  70767720          DCB      "pvw %u\n",0
00003c  25750a00

                          AREA ||i._Z16serialIOClkEventv||, CODE, READONLY, ALIGN=2

                  _Z16serialIOClkEventv PROC ; serialIOClkEvent()
;;;38     static volatile bool serialIOClkEventFlag = false;
;;;39     static void serialIOClkEvent() {
000000  2001              MOVS     r0,#1
;;;40     	serialIOClkEventFlag = true;
000002  4901              LDR      r1,|L6.8|
000004  7008              STRB     r0,[r1,#0]
;;;41     }
000006  4770              BX       lr
;;;42     
                          ENDP

                  |L6.8|
                          DCD      serialIOClkEventFlag

                          AREA ||i._Z18mixerTransCallbackPv||, CODE, READONLY, ALIGN=2

                  _Z18mixerTransCallbackPv PROC ; mixerTransCallback(void*)
;;;69     
;;;70     static void mixerTransCallback(void* usrPtr) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;71     	assert(usrPtr);
000004  b104              CBZ      r4,|L7.8|
000006  e004              B        |L7.18|
                  |L7.8|
000008  2247              MOVS     r2,#0x47
00000a  a105              ADR      r1,|L7.32|
00000c  a007              ADR      r0,|L7.44|
00000e  f7fffffe          BL       __aeabi_assert
                  |L7.18|
;;;72     	static_cast<Serial*>(usrPtr)->printf("trans\n");
000012  a108              ADR      r1,|L7.52|
000014  f1040030          ADD      r0,r4,#0x30
000018  f7fffffe          BL       _ZN4mbed6Stream6printfEPKcz ; mbed::Stream::printf(const char*, ...)
;;;73     }
00001c  bd10              POP      {r4,pc}
;;;74     
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
000020  6d61696e          DCB      "main.cpp",0
000024  2e637070
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L7.44|
00002c  75737250          DCB      "usrPtr",0
000030  747200  
000033  00                DCB      0
                  |L7.52|
000034  7472616e          DCB      "trans\n",0
000038  730a00  
00003b  00                DCB      0

                          AREA ||i._Z9gpio_readP6gpio_t||, CODE, READONLY, ALIGN=2

                  _Z9gpio_readP6gpio_t PROC ; gpio_read(gpio_t*)
;;;42     
;;;43     static inline int gpio_read(gpio_t *obj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;44         MBED_ASSERT(obj->pin != (PinName)NC);
000004  bf00              NOP      
000006  6820              LDR      r0,[r4,#0]
000008  1c40              ADDS     r0,r0,#1
00000a  b920              CBNZ     r0,|L8.22|
00000c  222c              MOVS     r2,#0x2c
00000e  a107              ADR      r1,|L8.44|
000010  a015              ADR      r0,|L8.104|
000012  f7fffffe          BL       mbed_assert_internal
                  |L8.22|
000016  bf00              NOP      
;;;45         return ((*obj->reg_in & obj->mask) ? 1 : 0);
000018  6960              LDR      r0,[r4,#0x14]
00001a  6800              LDR      r0,[r0,#0]
00001c  6861              LDR      r1,[r4,#4]
00001e  4008              ANDS     r0,r0,r1
000020  b108              CBZ      r0,|L8.38|
000022  2001              MOVS     r0,#1
                  |L8.36|
;;;46     }
000024  bd10              POP      {r4,pc}
                  |L8.38|
000026  2000              MOVS     r0,#0                 ;45
000028  e7fc              B        |L8.36|
;;;47     
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
00002c  6d626564          DCB      "mbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/gpio_obje"
000030  2f544152
000034  4745545f
000038  4c504331
00003c  3736382f
000040  54415247
000044  45545f4e
000048  58502f54
00004c  41524745
000050  545f4c50
000054  43313736
000058  582f6770
00005c  696f5f6f
000060  626a65  
000063  63742e68          DCB      "ct.h",0
000067  00      
                  |L8.104|
000068  6f626a2d          DCB      "obj->pin != (PinName)NC",0
00006c  3e70696e
000070  20213d20
000074  2850696e
000078  4e616d65
00007c  294e4300

                          AREA ||i.__sti___8_main_cpp_main||, CODE, READONLY, ALIGN=2

                  __sti___8_main_cpp_main PROC
000000  b530              PUSH     {r4,r5,lr}
000002  b089              SUB      sp,sp,#0x24
000004  f44f5016          MOV      r0,#0x2580
000008  2300              MOVS     r3,#0
00000a  4a25              LDR      r2,|L9.160|
00000c  1e51              SUBS     r1,r2,#1
00000e  9000              STR      r0,[sp,#0]
000010  4824              LDR      r0,|L9.164|
000012  f7fffffe          BL       _ZN4mbed6SerialC1E7PinNameS1_PKci ; mbed::Serial::Serial(PinName, PinName, const char*, int)
000016  4604              MOV      r4,r0
000018  4a23              LDR      r2,|L9.168|
00001a  4924              LDR      r1,|L9.172|
00001c  f7fffffe          BL       __aeabi_atexit
000020  2000              MOVS     r0,#0
000022  9003              STR      r0,[sp,#0xc]
000024  9004              STR      r0,[sp,#0x10]
000026  9005              STR      r0,[sp,#0x14]
000028  9006              STR      r0,[sp,#0x18]
00002a  9000              STR      r0,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  4603              MOV      r3,r0
000030  4602              MOV      r2,r0
000032  4601              MOV      r1,r0
000034  9002              STR      r0,[sp,#8]
000036  481e              LDR      r0,|L9.176|
000038  f7fffffe          BL       _ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_ ; MixerController::MixerController(void*, void(*)(void*, std::bitset<(unsigned)16>), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))
00003c  a808              ADD      r0,sp,#0x20
00003e  2100              MOVS     r1,#0
000040  bf00              NOP      
000042  2200              MOVS     r2,#0
000044  6002              STR      r2,[r0,#0]
000046  bf00              NOP      
000048  6001              STR      r1,[r0,#0]
00004a  bf00              NOP      
00004c  4604              MOV      r4,r0
00004e  6800              LDR      r0,[r0,#0]
000050  9004              STR      r0,[sp,#0x10]
000052  2000              MOVS     r0,#0
000054  4a12              LDR      r2,|L9.160|
000056  320e              ADDS     r2,r2,#0xe
000058  1c53              ADDS     r3,r2,#1
00005a  e9cd2001          STRD     r2,r0,[sp,#4]
00005e  9300              STR      r3,[sp,#0]
000060  9003              STR      r0,[sp,#0xc]
000062  4b0f              LDR      r3,|L9.160|
000064  1cdb              ADDS     r3,r3,#3
000066  1e92              SUBS     r2,r2,#2
000068  1c51              ADDS     r1,r2,#1
00006a  4812              LDR      r0,|L9.180|
00006c  f7fffffe          BL       _ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE ; SerialInSerialOut<(unsigned)24, (unsigned)16>::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset<(unsigned)24>), std::bitset<(unsigned)16>)
000070  4c11              LDR      r4,|L9.184|
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       _ZN4mbed10TimerEventC2Ev ; mbed::TimerEvent::TimerEvent__sub_object()
000078  4604              MOV      r4,r0
00007a  4810              LDR      r0,|L9.188|
00007c  6020              STR      r0,[r4,#0]
00007e  2100              MOVS     r1,#0
000080  f1040018          ADD      r0,r4,#0x18
000084  f7fffffe          BL       _ZN4mbed8CallbackIFvvEEC1EPS1_ ; mbed::Callback<void()>::Callback(void(*)())
000088  f1a00418          SUB      r4,r0,#0x18
00008c  bf00              NOP      
00008e  4625              MOV      r5,r4
000090  4a05              LDR      r2,|L9.168|
000092  490b              LDR      r1,|L9.192|
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       __aeabi_atexit
00009a  b009              ADD      sp,sp,#0x24
00009c  bd30              POP      {r4,r5,pc}
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      0x2009c003
                  |L9.164|
                          DCD      ||pc||
                  |L9.168|
                          DCD      __dso_handle
                  |L9.172|
                          DCD      _ZN4mbed6SerialD1Ev ; mbed::Serial::~Serial()
                  |L9.176|
                          DCD      mixer
                  |L9.180|
                          DCD      serialIO
                  |L9.184|
                          DCD      serialIOClk
                  |L9.188|
                          DCD      _ZTVN4mbed6TickerE+0x8 ; vtable for mbed::Ticker
                  |L9.192|
                          DCD      _ZN4mbed6TickerD1Ev ; mbed::Ticker::~Ticker()

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;76     
;;;77     int main(void) {
000000  b51f              PUSH     {r0-r4,lr}
;;;78     	//Configura USART
;;;79     	pc.format(8, Serial::None, 1); //Bits, Parity, Stop bits
000002  2301              MOVS     r3,#1
000004  2200              MOVS     r2,#0
000006  2108              MOVS     r1,#8
000008  482b              LDR      r0,|L10.184|
00000a  f7fffffe          BL       _ZN4mbed10SerialBase6formatEiNS0_6ParityEi ; mbed::SerialBase::format(int, mbed::SerialBase::Parity, int)
;;;80     	pc.baud(9600);
00000e  f44f5116          MOV      r1,#0x2580
000012  4829              LDR      r0,|L10.184|
000014  f7fffffe          BL       _ZN4mbed10SerialBase4baudEi ; mbed::SerialBase::baud(int)
;;;81     
;;;82     	//Enlazar el controlador a la salida por usart
;;;83     	mixer.setProgramUserPointer(&pc);
000018  4927              LDR      r1,|L10.184|
00001a  4828              LDR      r0,|L10.188|
00001c  f7fffffe          BL       _ZN15MixerController21setProgramUserPointerEPv ; MixerController::setProgramUserPointer(void*)
;;;84     	mixer.setPreviewUserPointer(&pc);
000020  4925              LDR      r1,|L10.184|
000022  4826              LDR      r0,|L10.188|
000024  f7fffffe          BL       _ZN15MixerController21setPreviewUserPointerEPv ; MixerController::setPreviewUserPointer(void*)
;;;85     	mixer.setCutUserPointer(&pc);
000028  4923              LDR      r1,|L10.184|
00002a  4824              LDR      r0,|L10.188|
00002c  f7fffffe          BL       _ZN15MixerController17setCutUserPointerEPv ; MixerController::setCutUserPointer(void*)
;;;86     	mixer.setTransitionUserPointer(&pc);
000030  4921              LDR      r1,|L10.184|
000032  4822              LDR      r0,|L10.188|
000034  f7fffffe          BL       _ZN15MixerController24setTransitionUserPointerEPv ; MixerController::setTransitionUserPointer(void*)
;;;87     	mixer.setProgramCallback(mixerPgmCallback);
000038  4921              LDR      r1,|L10.192|
00003a  4820              LDR      r0,|L10.188|
00003c  f7fffffe          BL       _ZN15MixerController18setProgramCallbackEPFvPvjE ; MixerController::setProgramCallback(void(*)(void*, unsigned))
;;;88     	mixer.setPreviewCallback(mixerPvwCallback);
000040  4920              LDR      r1,|L10.196|
000042  481e              LDR      r0,|L10.188|
000044  f7fffffe          BL       _ZN15MixerController18setPreviewCallbackEPFvPvjE ; MixerController::setPreviewCallback(void(*)(void*, unsigned))
;;;89     	mixer.setCutCallback(mixerCutCallback);
000048  491f              LDR      r1,|L10.200|
00004a  481c              LDR      r0,|L10.188|
00004c  f7fffffe          BL       _ZN15MixerController14setCutCallbackEPFvPvE ; MixerController::setCutCallback(void(*)(void*))
;;;90     	mixer.setTransitionCallback(mixerTransCallback);
000050  491e              LDR      r1,|L10.204|
000052  481a              LDR      r0,|L10.188|
000054  f7fffffe          BL       _ZN15MixerController21setTransitionCallbackEPFvPvE ; MixerController::setTransitionCallback(void(*)(void*))
;;;91     	
;;;92     	//Enlazar el controlador con la interfaz de registros serie/paralelo
;;;93     	mixer.setLedUserPointer(&serialIO);
000058  491d              LDR      r1,|L10.208|
00005a  4818              LDR      r0,|L10.188|
00005c  f7fffffe          BL       _ZN15MixerController17setLedUserPointerEPv ; MixerController::setLedUserPointer(void*)
;;;94     	mixer.setLedCallback(mixerLedCallback);
000060  491c              LDR      r1,|L10.212|
000062  4816              LDR      r0,|L10.188|
000064  f7fffffe          BL       _ZN15MixerController14setLedCallbackEPFvPvSt6bitsetILj16EEE ; MixerController::setLedCallback(void(*)(void*, std::bitset<(unsigned)16>))
;;;95     	
;;;96     	serialIO.setUserPointer(&mixer);
000068  4814              LDR      r0,|L10.188|
00006a  4919              LDR      r1,|L10.208|
00006c  6788              STR      r0,[r1,#0x78]
00006e  bf00              NOP      
;;;97     	serialIO.setInputCallback(mixerButCallback);
000070  4819              LDR      r0,|L10.216|
000072  67c8              STR      r0,[r1,#0x7c]
000074  bf00              NOP      
;;;98     	
;;;99     	//Configurar el reloj
;;;100    	const uint32_t T_CLK = 1000; //1ms de periodod de reloj
000076  bf00              NOP      
;;;101    	serialIOClk.attach_us(serialIOClkEvent, T_CLK/2);
000078  4918              LDR      r1,|L10.220|
00007a  4668              MOV      r0,sp
00007c  f7fffffe          BL       _ZN4mbed8CallbackIFvvEEC1EPS1_ ; mbed::Callback<void()>::Callback(void(*)())
000080  4604              MOV      r4,r0
000082  f44f72fa          MOV      r2,#0x1f4
000086  4621              MOV      r1,r4
000088  4815              LDR      r0,|L10.224|
00008a  f7fffffe          BL       _ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj ; mbed::Ticker::attach_us(mbed::Callback<void()>, unsigned)
00008e  4668              MOV      r0,sp
000090  f7fffffe          BL       _ZN4mbed8CallbackIFvvEED1Ev ; mbed::Callback<void()>::~Callback()
;;;102    	
;;;103    	//Bucle de atencion a los flags de las interrupciones
;;;104    	for ever {
000094  bf00              NOP      
                  |L10.150|
;;;105    		//Atender al reloj del controlador SISO
;;;106    		if(serialIOClkEventFlag) {
000096  4813              LDR      r0,|L10.228|
000098  7800              LDRB     r0,[r0,#0]  ; serialIOClkEventFlag
00009a  b128              CBZ      r0,|L10.168|
;;;107    			serialIO.tick();
00009c  480c              LDR      r0,|L10.208|
00009e  f7fffffe          BL       _ZN17SerialInSerialOutILj24ELj16EE4tickEv ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()
;;;108    			serialIOClkEventFlag = false;
0000a2  2000              MOVS     r0,#0
0000a4  490f              LDR      r1,|L10.228|
0000a6  7008              STRB     r0,[r1,#0]
                  |L10.168|
;;;109    		}
;;;110    		
;;;111    		//Dormirse hasta la llegada de otra interrupcion.
;;;112    		//Cuidado con la seccion critica
;;;113    		__disable_irq();
0000a8  b672              CPSID    i
;;;114    		if(!serialIOClkEventFlag) {
0000aa  480e              LDR      r0,|L10.228|
0000ac  7800              LDRB     r0,[r0,#0]  ; serialIOClkEventFlag
0000ae  b900              CBNZ     r0,|L10.178|
;;;115    			__WFI();
0000b0  bf30              WFI      
                  |L10.178|
;;;116    		}
;;;117    		__enable_irq();
0000b2  b662              CPSIE    i
0000b4  e7ef              B        |L10.150|
;;;118    	}
;;;119    }
;;;1      /***************************************************************************
                          ENDP

0000b6  0000              DCW      0x0000
                  |L10.184|
                          DCD      ||pc||
                  |L10.188|
                          DCD      mixer
                  |L10.192|
                          DCD      _Z16mixerPgmCallbackPvj ; mixerPgmCallback(void*, unsigned)
                  |L10.196|
                          DCD      _Z16mixerPvwCallbackPvj ; mixerPvwCallback(void*, unsigned)
                  |L10.200|
                          DCD      _Z16mixerCutCallbackPv ; mixerCutCallback(void*)
                  |L10.204|
                          DCD      _Z18mixerTransCallbackPv ; mixerTransCallback(void*)
                  |L10.208|
                          DCD      serialIO
                  |L10.212|
                          DCD      _Z16mixerLedCallbackPvSt6bitsetILj16EE ; mixerLedCallback(void*, std::bitset<(unsigned)16>)
                  |L10.216|
                          DCD      _Z16mixerButCallbackPvSt6bitsetILj24EE ; mixerButCallback(void*, std::bitset<(unsigned)24>)
                  |L10.220|
                          DCD      _Z16serialIOClkEventv ; serialIOClkEvent()
                  |L10.224|
                          DCD      serialIOClk
                  |L10.228|
                          DCD      serialIOClkEventFlag

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z9gpio_readP6gpio_t||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z9gpio_readP6gpio_t||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z16serialIOClkEventv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16serialIOClkEventv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._Z16mixerButCallbackPvSt6bitsetILj24EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16mixerButCallbackPvSt6bitsetILj24EE||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._Z16mixerLedCallbackPvSt6bitsetILj16EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16mixerLedCallbackPvSt6bitsetILj16EE||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._Z16mixerPgmCallbackPvj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16mixerPgmCallbackPvj||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._Z16mixerPvwCallbackPvj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16mixerPvwCallbackPvj||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._Z16mixerCutCallbackPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16mixerCutCallbackPv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._Z18mixerTransCallbackPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z18mixerTransCallbackPv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i.__sti___8_main_cpp_main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___8_main_cpp_main||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||pc||
                          %        72
                  mixer
                          %        52
                  serialIO
                          %        140
                  serialIOClk
                          %        40

                          AREA ||.data||, DATA, ALIGN=0

                  serialIOClkEventFlag
000000  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_main_cpp_main

                          AREA ||.constdata__ZZNSt6bitsetILj24EE3setEjbEs||, COMGROUP=_ZZNSt6bitsetILj24EE3setEjbEs, DATA, READONLY, ALIGN=0

                  _ZZNSt6bitsetILj24EE3setEjbEs ; std::bitset<(unsigned)24>::set(unsigned, bool)::string
000000  00                DCB      0x00

                          AREA ||.constdata__ZZNKSt6bitsetILj16EE4testEjEs||, COMGROUP=_ZZNKSt6bitsetILj16EE4testEjEs, DATA, READONLY, ALIGN=0

                  _ZZNKSt6bitsetILj16EE4testEjEs ; std::bitset<(unsigned)16>::test(unsigned) const::string
000000  00                DCB      0x00

                          AREA ||.constdata__ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs||, COMGROUP=_ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs, DATA, READONLY, ALIGN=0

                  _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string
000000  21737461          DCB      0x21,0x73,0x74,0x61
000004  7469635f          DCB      0x74,0x69,0x63,0x5f
000008  63617374          DCB      0x63,0x61,0x73,0x74
00000c  3c626f6f          DCB      0x3c,0x62,0x6f,0x6f
000010  6c3e286d          DCB      0x6c,0x3e,0x28,0x6d
000014  5f6c6174          DCB      0x5f,0x6c,0x61,0x74
000018  63682900          DCB      0x63,0x68,0x29,0x00

                          AREA ||.constdata__ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_0||, COMGROUP=_ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_0, DATA, READONLY, ALIGN=0

                  _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_0 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 2)
000000  53657269          DCB      0x53,0x65,0x72,0x69
000004  616c496e          DCB      0x61,0x6c,0x49,0x6e
000008  53657269          DCB      0x53,0x65,0x72,0x69
00000c  616c4f75          DCB      0x61,0x6c,0x4f,0x75
000010  742e6800          DCB      0x74,0x2e,0x68,0x00

                          AREA ||.constdata__ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_1||, COMGROUP=_ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_1, DATA, READONLY, ALIGN=0

                  _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_1 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 3)
000000  73746174          DCB      0x73,0x74,0x61,0x74
000004  69635f63          DCB      0x69,0x63,0x5f,0x63
000008  6173743c          DCB      0x61,0x73,0x74,0x3c
00000c  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
000010  3e286d5f          DCB      0x3e,0x28,0x6d,0x5f
000014  6c6f6164          DCB      0x6c,0x6f,0x61,0x64
000018  2900              DCB      0x29,0x00

                          AREA ||.constdata__ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_2||, COMGROUP=_ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_2, DATA, READONLY, ALIGN=0

                  _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_2 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 4)
000000  6f757449          DCB      0x6f,0x75,0x74,0x49
000004  6e646578          DCB      0x6e,0x64,0x65,0x78
000008  203c206d          DCB      0x20,0x3c,0x20,0x6d
00000c  5f646174          DCB      0x5f,0x64,0x61,0x74
000010  614f7574          DCB      0x61,0x4f,0x75,0x74
000014  2e73697a          DCB      0x2e,0x73,0x69,0x7a
000018  65282900          DCB      0x65,0x28,0x29,0x00

                          AREA ||.constdata__ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_3||, COMGROUP=_ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_3, DATA, READONLY, ALIGN=0

                  _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_3 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 5)
000000  6d5f6974          DCB      0x6d,0x5f,0x69,0x74
000004  65726174          DCB      0x65,0x72,0x61,0x74
000008  696f6e20          DCB      0x69,0x6f,0x6e,0x20
00000c  3c204954          DCB      0x3c,0x20,0x49,0x54
000010  45524154          DCB      0x45,0x52,0x41,0x54
000014  494f4e5f          DCB      0x49,0x4f,0x4e,0x5f
000018  434f554e          DCB      0x43,0x4f,0x55,0x4e
00001c  5400              DCB      0x54,0x00

                          AREA ||t._ZN17SerialInSerialOutILj24ELj16EE4tickEv||, COMGROUP=_ZN17SerialInSerialOutILj24ELj16EE4tickEv, CODE, READONLY, ALIGN=2

                  _ZN17SerialInSerialOutILj24ELj16EE4tickEv PROC ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()
;;;100    		 */
;;;101    		void tick() {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4604              MOV      r4,r0
;;;102    			//La configuracion de los pines se realiza en el pulso de bajada
;;;103    			if(m_clk){ 
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN4mbed10DigitalOutcviEv ; mbed::DigitalOut::operator int()
00000c  b120              CBZ      r0,|L83.24|
;;;104    				//Pulso de bajada
;;;105    				m_clk = 0;
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
000016  e0b4              B        |L83.386|
                  |L83.24|
;;;106    				
;;;107    			} else {
;;;108    				//Pulso de subida. La configuracion se realiza aqui
;;;109    				m_clk = 1;
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
;;;110    				
;;;111    				//Configurar los pines de salida y leer a la entrada
;;;112    				if(m_iteration == 0) {
000020  f8d40088          LDR      r0,[r4,#0x88]
000024  b950              CBNZ     r0,|L83.60|
;;;113    					//En la primera iteracion cargar los valores en el registro de desplazamiento
;;;114    					m_latch = 1;
000026  2101              MOVS     r1,#1
000028  f1040018          ADD      r0,r4,#0x18
00002c  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
;;;115    					m_load = 0;
000030  2100              MOVS     r1,#0
000032  f1040030          ADD      r0,r4,#0x30
000036  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
00003a  e08c              B        |L83.342|
                  |L83.60|
;;;116    					
;;;117    				} else {
;;;118    					//Dejar de cargar los valores
;;;119    					if(m_iteration == 1) {
00003c  f8d40088          LDR      r0,[r4,#0x88]
000040  2801              CMP      r0,#1
000042  d109              BNE      |L83.88|
;;;120    						m_latch = 0;
000044  2100              MOVS     r1,#0
000046  f1040018          ADD      r0,r4,#0x18
00004a  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
;;;121    						m_load = 1;
00004e  2101              MOVS     r1,#1
000050  f1040030          ADD      r0,r4,#0x30
000054  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
                  |L83.88|
;;;122    					}
;;;123    					assert(!static_cast<bool>(m_latch)); //Asegurarse de que la carga este desactivada
000058  f1040018          ADD      r0,r4,#0x18
00005c  f7fffffe          BL       _ZN4mbed10DigitalOutcviEv ; mbed::DigitalOut::operator int()
000060  b900              CBNZ     r0,|L83.100|
000062  e004              B        |L83.110|
                  |L83.100|
000064  227b              MOVS     r2,#0x7b
000066  4948              LDR      r1,|L83.392|
000068  4848              LDR      r0,|L83.396|
00006a  f7fffffe          BL       __aeabi_assert
                  |L83.110|
;;;124    					assert(static_cast<bool>(m_load)); //Asegurarse de que la carga este desactivada
00006e  f1040030          ADD      r0,r4,#0x30
000072  f7fffffe          BL       _ZN4mbed10DigitalOutcviEv ; mbed::DigitalOut::operator int()
000076  b100              CBZ      r0,|L83.122|
000078  e004              B        |L83.132|
                  |L83.122|
00007a  227c              MOVS     r2,#0x7c
00007c  4942              LDR      r1,|L83.392|
00007e  4844              LDR      r0,|L83.400|
000080  f7fffffe          BL       __aeabi_assert
                  |L83.132|
;;;125    					
;;;126    					//Durante las iteraciones [1 ... InCnt], leer los datos a la entrada
;;;127    					if(m_iteration <= m_dataIn.size()) {
000084  bf00              NOP      
000086  2018              MOVS     r0,#0x18
000088  f8d41088          LDR      r1,[r4,#0x88]
00008c  4288              CMP      r0,r1
00008e  d329              BCC      |L83.228|
;;;128    						//Hacer "hueco" al dato entrante en el LSB
;;;129    						m_dataIn <<= 1;
000090  f1040080          ADD      r0,r4,#0x80
000094  2101              MOVS     r1,#1
000096  6802              LDR      r2,[r0,#0]
000098  408a              LSLS     r2,r2,r1
00009a  6002              STR      r2,[r0,#0]
00009c  6802              LDR      r2,[r0,#0]
00009e  f022427f          BIC      r2,r2,#0xff000000
0000a2  6002              STR      r2,[r0,#0]
0000a4  bf00              NOP      
;;;130    						
;;;131    						//Escribe el dato a la entrada en el LSB (posicion 0)
;;;132    						m_dataIn.set(0, static_cast<bool>(m_din));
0000a6  f1040548          ADD      r5,r4,#0x48
0000aa  bf00              NOP      
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       _Z9gpio_readP6gpio_t ; gpio_read(gpio_t*)
0000b2  bf00              NOP      
0000b4  b108              CBZ      r0,|L83.186|
0000b6  2001              MOVS     r0,#1
0000b8  e000              B        |L83.188|
                  |L83.186|
0000ba  2000              MOVS     r0,#0
                  |L83.188|
0000bc  4607              MOV      r7,r0
0000be  463a              MOV      r2,r7
0000c0  2100              MOVS     r1,#0
0000c2  f1040080          ADD      r0,r4,#0x80
0000c6  f7fffffe          BL       _ZNSt6bitsetILj24EE3setEjb ; std::bitset<(unsigned)24>::set(unsigned, bool)
;;;133    						
;;;134    						//Si se trata del ultimo valor, llamar a la funcion de atencion
;;;135    						if(m_iteration == m_dataIn.size() && m_inputCallback) {
0000ca  bf00              NOP      
0000cc  2018              MOVS     r0,#0x18
0000ce  f8d41088          LDR      r1,[r4,#0x88]
0000d2  4288              CMP      r0,r1
0000d4  d106              BNE      |L83.228|
0000d6  6fe0              LDR      r0,[r4,#0x7c]
0000d8  b120              CBZ      r0,|L83.228|
;;;136    							m_inputCallback(m_userPtr, m_dataIn);
0000da  2180              MOVS     r1,#0x80
0000dc  5909              LDR      r1,[r1,r4]
0000de  e9d4021e          LDRD     r0,r2,[r4,#0x78]
0000e2  4790              BLX      r2
                  |L83.228|
;;;137    						}
;;;138    					}
;;;139    					
;;;140    					//Durante los ultimos OutCnt sacar los valores a la salida
;;;141    					const int outIndex = static_cast<int>(m_iteration) - static_cast<int>(ITERATION_OFFSET_OUT);
0000e4  f8d40088          LDR      r0,[r4,#0x88]
0000e8  f1a00609          SUB      r6,r0,#9
;;;142    					if(outIndex >= 0) {
0000ec  2e00              CMP      r6,#0
0000ee  db31              BLT      |L83.340|
;;;143    						//Asegurarse de que el indice es valido
;;;144    						assert(outIndex < m_dataOut.size());
0000f0  bf00              NOP      
0000f2  2010              MOVS     r0,#0x10
0000f4  42b0              CMP      r0,r6
0000f6  d900              BLS      |L83.250|
0000f8  e004              B        |L83.260|
                  |L83.250|
0000fa  2290              MOVS     r2,#0x90
0000fc  4922              LDR      r1,|L83.392|
0000fe  4825              LDR      r0,|L83.404|
000100  f7fffffe          BL       __aeabi_assert
                  |L83.260|
;;;145    						
;;;146    						//Sacar el valor correspondiente a este indice,
;;;147    						//de MSB hacia LSB
;;;148    						m_dout = m_dataOut.test(m_dataOut.size() - outIndex - 1);
000104  f1040884          ADD      r8,r4,#0x84
000108  2010              MOVS     r0,#0x10
00010a  1b80              SUBS     r0,r0,r6
00010c  1e45              SUBS     r5,r0,#1
00010e  4628              MOV      r0,r5
000110  1c41              ADDS     r1,r0,#1
000112  2911              CMP      r1,#0x11
000114  d201              BCS      |L83.282|
000116  2101              MOVS     r1,#1
000118  e000              B        |L83.284|
                  |L83.282|
00011a  2100              MOVS     r1,#0
                  |L83.284|
00011c  b101              CBZ      r1,|L83.288|
00011e  e007              B        |L83.304|
                  |L83.288|
000120  2001              MOVS     r0,#1
000122  462b              MOV      r3,r5
000124  4a1c              LDR      r2,|L83.408|
000126  4611              MOV      r1,r2
000128  9000              STR      r0,[sp,#0]
00012a  2009              MOVS     r0,#9
00012c  f7fffffe          BL       _ZN4__rw10__rw_throwEiz ; __rw::__rw_throw(int, ...)
                  |L83.304|
000130  0968              LSRS     r0,r5,#5
000132  f8580020          LDR      r0,[r8,r0,LSL #2]
000136  f005021f          AND      r2,r5,#0x1f
00013a  2101              MOVS     r1,#1
00013c  4091              LSLS     r1,r1,r2
00013e  4008              ANDS     r0,r0,r1
000140  b108              CBZ      r0,|L83.326|
000142  2001              MOVS     r0,#1
000144  e000              B        |L83.328|
                  |L83.326|
000146  2000              MOVS     r0,#0
                  |L83.328|
000148  4607              MOV      r7,r0
00014a  4639              MOV      r1,r7
00014c  f1040060          ADD      r0,r4,#0x60
000150  f7fffffe          BL       _ZN4mbed10DigitalOutaSEi ; mbed::DigitalOut::operator =(int)
                  |L83.340|
;;;149    					}
;;;150    				}
000154  bf00              NOP      
                  |L83.342|
;;;151    				
;;;152    				//Siguiente iteracion
;;;153    				m_iteration = m_iteration < (ITERATION_COUNT-1) ? m_iteration + 1 : 0;
000156  f8d40088          LDR      r0,[r4,#0x88]
00015a  2818              CMP      r0,#0x18
00015c  d203              BCS      |L83.358|
00015e  f8d40088          LDR      r0,[r4,#0x88]
000162  1c40              ADDS     r0,r0,#1
000164  e000              B        |L83.360|
                  |L83.358|
000166  2000              MOVS     r0,#0
                  |L83.360|
000168  f8c40088          STR      r0,[r4,#0x88]
;;;154    				assert(m_iteration < ITERATION_COUNT); //Nunca puede ser mayor o igual que el maximo
00016c  f8d40088          LDR      r0,[r4,#0x88]
000170  2819              CMP      r0,#0x19
000172  d200              BCS      |L83.374|
000174  e004              B        |L83.384|
                  |L83.374|
000176  229a              MOVS     r2,#0x9a
000178  4903              LDR      r1,|L83.392|
00017a  4808              LDR      r0,|L83.412|
00017c  f7fffffe          BL       __aeabi_assert
                  |L83.384|
000180  bf00              NOP      
                  |L83.386|
;;;155    				
;;;156    			}
;;;157    		}
000182  e8bd83f8          POP      {r3-r9,pc}
;;;158    		
                          ENDP

000186  0000              DCW      0x0000
                  |L83.392|
                          DCD      _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_0 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 2)
                  |L83.396|
                          DCD      _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string
                  |L83.400|
                          DCD      _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_1 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 3)
                  |L83.404|
                          DCD      _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_2 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 4)
                  |L83.408|
                          DCD      _ZZNKSt6bitsetILj16EE4testEjEs ; std::bitset<(unsigned)16>::test(unsigned) const::string
                  |L83.412|
                          DCD      _ZZN17SerialInSerialOutILj24ELj16EE4tickEvEs_3 ; SerialInSerialOut<(unsigned)24, (unsigned)16>::tick()::string (instance 5)

                          AREA ||area_number.84||, COMGROUP=_ZN17SerialInSerialOutILj24ELj16EE4tickEv, LINKORDER=||t._ZN17SerialInSerialOutILj24ELj16EE4tickEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.84||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN17SerialInSerialOutILj24ELj16EE4tickEv||
                          DCD      0x00000001

                          AREA ||t._ZN4mbed8CallbackIFvvEEC1EPS1_||, COMGROUP=_ZN4mbed8CallbackIFvvEEC1EPS1_, CODE, READONLY, ALIGN=2

                  _ZN4mbed8CallbackIFvvEEC2EPS1_                  ; Alternate entry point ; mbed::Callback<void()>::Callback__sub_object(void(*)())
                  _ZN4mbed8CallbackIFvvEEC1EPS1_ PROC ; mbed::Callback<void()>::Callback(void(*)())
;;;70          */
;;;71         Callback(R (*func)() = 0) {
;;;72             if (!func) {
;;;73                 _ops = 0;
;;;74             } else {
;;;75                 generate(func);
;;;76             }
;;;77         }
;;;78     
000000  b510              PUSH     {r4,lr}
000002  460a              MOV      r2,r1
000004  b912              CBNZ     r2,|L90.12|
000006  2100              MOVS     r1,#0
000008  60c1              STR      r1,[r0,#0xc]
00000a  e009              B        |L90.32|
                  |L90.12|
00000c  4601              MOV      r1,r0
00000e  4608              MOV      r0,r1
000010  bf00              NOP      
000012  1e03              SUBS     r3,r0,#0
000014  d000              BEQ      |L90.24|
000016  601a              STR      r2,[r3,#0]
                  |L90.24|
000018  4c02              LDR      r4,|L90.36|
00001a  60cc              STR      r4,[r1,#0xc]
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L90.32|
000020  bd10              POP      {r4,pc}
                          ENDP

000022  0000              DCW      0x0000
                  |L90.36|
                          DCD      _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops ; void mbed::Callback<void()>::generate<void(*)()>(const T1&)::ops

                          AREA ||area_number.91||, COMGROUP=_ZN4mbed8CallbackIFvvEEC1EPS1_, LINKORDER=||t._ZN4mbed8CallbackIFvvEEC1EPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.91||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4mbed8CallbackIFvvEEC1EPS1_||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed10DigitalOutaSEi||, COMGROUP=_ZN4mbed10DigitalOutaSEi, CODE, READONLY, ALIGN=1

                  _ZN4mbed10DigitalOutaSEi PROC ; mbed::DigitalOut::operator =(int)
;;;101         */
;;;102        DigitalOut& operator= (int value) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;103            // Underlying write is thread safe
;;;104            write(value);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN4mbed10DigitalOut5writeEi ; mbed::DigitalOut::write(int)
;;;105            return *this;
00000e  4620              MOV      r0,r4
;;;106        }
000010  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||area_number.98||, COMGROUP=_ZN4mbed10DigitalOutaSEi, LINKORDER=||i._ZN4mbed10DigitalOutaSEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.98||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed10DigitalOutaSEi||
                          DCD      0x00000001

                          AREA ||t._ZNSt6bitsetILj24EE3setEjb||, COMGROUP=_ZNSt6bitsetILj24EE3setEjb, CODE, READONLY, ALIGN=2

                  _ZNSt6bitsetILj24EE3setEjb PROC ; std::bitset<(unsigned)24>::set(unsigned, bool)
;;;323    inline bitset<_Size>&
;;;324    bitset<_Size>::set (size_t __pos, bool __val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;325    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;326        _RWSTD_REQUIRES (_C_valid_pos (__pos),
000008  4620              MOV      r0,r4
00000a  1c41              ADDS     r1,r0,#1
00000c  2919              CMP      r1,#0x19
00000e  d201              BCS      |L104.20|
000010  2101              MOVS     r1,#1
000012  e000              B        |L104.22|
                  |L104.20|
000014  2100              MOVS     r1,#0
                  |L104.22|
000016  b101              CBZ      r1,|L104.26|
000018  e007              B        |L104.42|
                  |L104.26|
00001a  2001              MOVS     r0,#1
00001c  4623              MOV      r3,r4
00001e  4a10              LDR      r2,|L104.96|
000020  4611              MOV      r1,r2
000022  9000              STR      r0,[sp,#0]
000024  2009              MOVS     r0,#9
000026  f7fffffe          BL       _ZN4__rw10__rw_throwEiz ; __rw::__rw_throw(int, ...)
                  |L104.42|
;;;327                         (_RWSTD_ERROR_OUT_OF_RANGE,
;;;328                          _RWSTD_FUNC ("bitset::set(size_t, bool)"),
;;;329                          __pos, _C_nelems));
;;;330    
;;;331        if (__val)
00002a  b15e              CBZ      r6,|L104.68|
;;;332            _C_bits [__pos / _C_elembits] |=  (1UL << __pos % _C_elembits);
00002c  0960              LSRS     r0,r4,#5
00002e  f8550020          LDR      r0,[r5,r0,LSL #2]
000032  f004021f          AND      r2,r4,#0x1f
000036  2101              MOVS     r1,#1
000038  4091              LSLS     r1,r1,r2
00003a  4308              ORRS     r0,r0,r1
00003c  0961              LSRS     r1,r4,#5
00003e  f8450021          STR      r0,[r5,r1,LSL #2]
000042  e00a              B        |L104.90|
                  |L104.68|
;;;333        else
;;;334            _C_bits [__pos / _C_elembits] &= ~(1UL << __pos % _C_elembits);
000044  0960              LSRS     r0,r4,#5
000046  f8550020          LDR      r0,[r5,r0,LSL #2]
00004a  f004021f          AND      r2,r4,#0x1f
00004e  2101              MOVS     r1,#1
000050  4091              LSLS     r1,r1,r2
000052  4388              BICS     r0,r0,r1
000054  0961              LSRS     r1,r4,#5
000056  f8450021          STR      r0,[r5,r1,LSL #2]
                  |L104.90|
;;;335        return *this;
00005a  4628              MOV      r0,r5
;;;336    }
00005c  bdf8              POP      {r3-r7,pc}
;;;337    
                          ENDP

00005e  0000              DCW      0x0000
                  |L104.96|
                          DCD      _ZZNSt6bitsetILj24EE3setEjbEs ; std::bitset<(unsigned)24>::set(unsigned, bool)::string

                          AREA ||area_number.105||, COMGROUP=_ZNSt6bitsetILj24EE3setEjb, LINKORDER=||t._ZNSt6bitsetILj24EE3setEjb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6bitsetILj24EE3setEjb||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed10DigitalOutcviEv||, COMGROUP=_ZN4mbed10DigitalOutcviEv, CODE, READONLY, ALIGN=1

                  _ZN4mbed10DigitalOutcviEv PROC ; mbed::DigitalOut::operator int()
;;;116         */
;;;117        operator int() {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;118            // Underlying call is thread safe
;;;119            return read();
000004  bf00              NOP      
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _Z9gpio_readP6gpio_t ; gpio_read(gpio_t*)
;;;120        }
00000c  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||area_number.112||, COMGROUP=_ZN4mbed10DigitalOutcviEv, LINKORDER=||i._ZN4mbed10DigitalOutcviEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.112||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed10DigitalOutcviEv||
                          DCD      0x00000001

                          AREA ||t._ZN4mbed8CallbackIFvvEED1Ev||, COMGROUP=_ZN4mbed8CallbackIFvvEED1Ev, CODE, READONLY, ALIGN=1

                  _ZN4mbed8CallbackIFvvEED2Ev                  ; Alternate entry point ; mbed::Callback<void()>::~Callback__sub_object()
                  _ZN4mbed8CallbackIFvvEED1Ev PROC ; mbed::Callback<void()>::~Callback()
;;;262         */
;;;263        ~Callback() {
;;;264            if (_ops) {
;;;265                _ops->dtor(this);
;;;266            }
;;;267        }
;;;268    
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  68e0              LDR      r0,[r4,#0xc]
000006  b118              CBZ      r0,|L118.16|
000008  68e0              LDR      r0,[r4,#0xc]
00000a  6881              LDR      r1,[r0,#8]
00000c  4620              MOV      r0,r4
00000e  4788              BLX      r1
                  |L118.16|
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.119||, COMGROUP=_ZN4mbed8CallbackIFvvEED1Ev, LINKORDER=||t._ZN4mbed8CallbackIFvvEED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.119||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4mbed8CallbackIFvvEED1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj||, COMGROUP=_ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj, CODE, READONLY, ALIGN=1

                  _ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj PROC ; mbed::Ticker::attach_us(mbed::Callback<void()>, unsigned)
;;;102         */
;;;103        void attach_us(Callback<void()> func, timestamp_t t) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
000008  4693              MOV      r11,r2
;;;104            _function = func;
00000a  f10a0418          ADD      r4,r10,#0x18
00000e  464e              MOV      r6,r9
000010  42b4              CMP      r4,r6
000012  d014              BEQ      |L125.62|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN4mbed8CallbackIFvvEED1Ev ; mbed::Callback<void()>::~Callback()
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  1e27              SUBS     r7,r4,#0
000020  d00d              BEQ      |L125.62|
000022  46b8              MOV      r8,r7
000024  4635              MOV      r5,r6
000026  68e8              LDR      r0,[r5,#0xc]
000028  b120              CBZ      r0,|L125.52|
00002a  68e8              LDR      r0,[r5,#0xc]
00002c  4629              MOV      r1,r5
00002e  6842              LDR      r2,[r0,#4]
000030  4640              MOV      r0,r8
000032  4790              BLX      r2
                  |L125.52|
000034  68e8              LDR      r0,[r5,#0xc]
000036  f8c8000c          STR      r0,[r8,#0xc]
00003a  bf00              NOP      
00003c  4647              MOV      r7,r8
                  |L125.62|
00003e  bf00              NOP      
;;;105            setup(t);
000040  4659              MOV      r1,r11
000042  4650              MOV      r0,r10
000044  f7fffffe          BL       _ZN4mbed6Ticker5setupEj ; mbed::Ticker::setup(unsigned)
;;;106        }
000048  e8bd9ff0          POP      {r4-r12,pc}
;;;107    
                          ENDP


                          AREA ||area_number.126||, COMGROUP=_ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj, LINKORDER=||i._ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEj||
                          DCD      0x00000001

                          AREA ||t._ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE||, COMGROUP=_ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE, CODE, READONLY, ALIGN=1

                  _ZN17SerialInSerialOutILj24ELj16EEC2E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE                  ; Alternate entry point ; SerialInSerialOut<(unsigned)24, (unsigned)16>::SerialInSerialOut__sub_object(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset<(unsigned)24>), std::bitset<(unsigned)16>)
                  _ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE PROC ; SerialInSerialOut<(unsigned)24, (unsigned)16>::SerialInSerialOut(PinName, PinName, PinName, PinName, PinName, void*, void(*)(void*, std::bitset<(unsigned)24>), std::bitset<(unsigned)16>)
;;;27     		 */
;;;28     		SerialInSerialOut(PinName clk,
;;;29     											PinName latch,
;;;30     											PinName load,
;;;31     											PinName dataIn,
;;;32     											PinName dataOut,
;;;33     											void* usrPtr = NULL,
;;;34     											InputCallback inputCbk = NULL,
;;;35     											OutputData outData = 0 )
;;;36     			: m_clk(clk, 0)
;;;37     			, m_latch(latch, 0)
;;;38     			, m_load(load, 1)
;;;39     			, m_din(dataIn) //No necesita pullup ni pulldown
;;;40     			, m_dout(dataOut, 0)
;;;41     			, m_userPtr(usrPtr)	
;;;42     			, m_inputCallback(inputCbk)
;;;43     			, m_dataIn(0)
;;;44     			, m_dataOut(outData)
;;;45     			, m_iteration(0)
;;;46     		{
;;;47     		}
;;;48     	
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  e9dd9a0c          LDRD     r9,r10,[sp,#0x30]
000010  9f0a              LDR      r7,[sp,#0x28]
000012  2200              MOVS     r2,#0
000014  4641              MOV      r1,r8
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _ZN4mbed10DigitalOutC1E7PinNamei ; mbed::DigitalOut::DigitalOut(PinName, int)
00001c  4604              MOV      r4,r0
00001e  2200              MOVS     r2,#0
000020  4629              MOV      r1,r5
000022  f1040018          ADD      r0,r4,#0x18
000026  f7fffffe          BL       _ZN4mbed10DigitalOutC1E7PinNamei ; mbed::DigitalOut::DigitalOut(PinName, int)
00002a  f1a00418          SUB      r4,r0,#0x18
00002e  2201              MOVS     r2,#1
000030  4631              MOV      r1,r6
000032  f1040030          ADD      r0,r4,#0x30
000036  f7fffffe          BL       _ZN4mbed10DigitalOutC1E7PinNamei ; mbed::DigitalOut::DigitalOut(PinName, int)
00003a  f1a00430          SUB      r4,r0,#0x30
00003e  f1040b48          ADD      r11,r4,#0x48
000042  2118              MOVS     r1,#0x18
000044  4658              MOV      r0,r11
000046  f7fffffe          BL       __aeabi_memclr4
00004a  4639              MOV      r1,r7
00004c  4658              MOV      r0,r11
00004e  f7fffffe          BL       gpio_init_in
000052  bf00              NOP      
000054  f1ab0448          SUB      r4,r11,#0x48
000058  2200              MOVS     r2,#0
00005a  f1040060          ADD      r0,r4,#0x60
00005e  990b              LDR      r1,[sp,#0x2c]
000060  f7fffffe          BL       _ZN4mbed10DigitalOutC1E7PinNamei ; mbed::DigitalOut::DigitalOut(PinName, int)
000064  f1a00460          SUB      r4,r0,#0x60
000068  f8c49078          STR      r9,[r4,#0x78]
00006c  f8c4a07c          STR      r10,[r4,#0x7c]
000070  f1040080          ADD      r0,r4,#0x80
000074  2100              MOVS     r1,#0
000076  bf00              NOP      
000078  2200              MOVS     r2,#0
00007a  6002              STR      r2,[r0,#0]
00007c  bf00              NOP      
00007e  f8401980          STR      r1,[r0],#-0x80
000082  bf00              NOP      
000084  4604              MOV      r4,r0
000086  2084              MOVS     r0,#0x84
000088  990e              LDR      r1,[sp,#0x38]
00008a  5101              STR      r1,[r0,r4]
00008c  2000              MOVS     r0,#0
00008e  f8c40088          STR      r0,[r4,#0x88]
000092  4620              MOV      r0,r4
000094  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP


                          AREA ||area_number.133||, COMGROUP=_ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE, LINKORDER=||t._ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN17SerialInSerialOutILj24ELj16EEC1E7PinNameS1_S1_S1_S1_PvPFvS2_St6bitsetILj24EEES3_ILj16EE||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed6SerialD1Ev||, COMGROUP=_ZN4mbed6SerialD1Ev, CODE, READONLY, ALIGN=2

                  _ZN4mbed6SerialD2Ev                  ; Alternate entry point ; mbed::Serial::~Serial__sub_object()
                  _ZN4mbed6SerialD1Ev PROC ; mbed::Serial::~Serial()
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  480d              LDR      r0,|L139.60|
000006  6020              STR      r0,[r4,#0]
000008  3020              ADDS     r0,r0,#0x20
00000a  6320              STR      r0,[r4,#0x30]
00000c  f1040044          ADD      r0,r4,#0x44
000010  bf00              NOP      
000012  f1a00444          SUB      r4,r0,#0x44
000016  3814              SUBS     r0,r0,#0x14
000018  f7fffffe          BL       _ZN4mbed6StreamD2Ev ; mbed::Stream::~Stream__sub_object()
00001c  f1a00430          SUB      r4,r0,#0x30
000020  4625              MOV      r5,r4
000022  4807              LDR      r0,|L139.64|
000024  6020              STR      r0,[r4,#0]
000026  2302              MOVS     r3,#2
000028  2210              MOVS     r2,#0x10
00002a  4906              LDR      r1,|L139.68|
00002c  f105000c          ADD      r0,r5,#0xc
000030  f7fffffe          BL       __aeabi_vec_dtor
000034  bf00              NOP      
000036  462c              MOV      r4,r5
000038  4620              MOV      r0,r4
00003a  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L139.60|
                          DCD      _ZTVN4mbed6SerialE+0x8 ; vtable for mbed::Serial
                  |L139.64|
                          DCD      _ZTVN4mbed10SerialBaseE+0x8 ; vtable for mbed::SerialBase
                  |L139.68|
                          DCD      _ZN4mbed8CallbackIFvvEED1Ev ; mbed::Callback<void()>::~Callback()

                          AREA ||area_number.140||, COMGROUP=_ZN4mbed6SerialD1Ev, LINKORDER=||i._ZN4mbed6SerialD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed6SerialD1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed6TickerD1Ev||, COMGROUP=_ZN4mbed6TickerD1Ev, CODE, READONLY, ALIGN=2

                  _ZN4mbed6TickerD2Ev                  ; Alternate entry point ; mbed::Ticker::~Ticker__sub_object()
                  _ZN4mbed6TickerD1Ev PROC ; mbed::Ticker::~Ticker()
;;;124    
;;;125        virtual ~Ticker() {
;;;126            detach();
;;;127        }
;;;128    
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4808              LDR      r0,|L143.40|
000006  6020              STR      r0,[r4,#0]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN4mbed6Ticker6detachEv ; mbed::Ticker::detach()
00000e  f1040018          ADD      r0,r4,#0x18
000012  f7fffffe          BL       _ZN4mbed8CallbackIFvvEED1Ev ; mbed::Callback<void()>::~Callback()
000016  f1a00418          SUB      r4,r0,#0x18
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZN4mbed10TimerEventD2Ev ; mbed::TimerEvent::~TimerEvent__sub_object()
000020  4604              MOV      r4,r0
000022  4620              MOV      r0,r4
000024  bd10              POP      {r4,pc}
                          ENDP

000026  0000              DCW      0x0000
                  |L143.40|
                          DCD      _ZTVN4mbed6TickerE+0x8 ; vtable for mbed::Ticker

                          AREA ||area_number.144||, COMGROUP=_ZN4mbed6TickerD1Ev, LINKORDER=||i._ZN4mbed6TickerD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.144||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed6TickerD1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed10DigitalOut5writeEi||, COMGROUP=_ZN4mbed10DigitalOut5writeEi, CODE, READONLY, ALIGN=2

                  _ZN4mbed10DigitalOut5writeEi PROC ; mbed::DigitalOut::write(int)
;;;72          */
;;;73         void write(int value) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;74             // Thread safe / atomic HAL call
;;;75             gpio_write(&gpio, value);
000006  462e              MOV      r6,r5
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  1c40              ADDS     r0,r0,#1
000010  b920              CBNZ     r0,|L150.28|
000012  2224              MOVS     r2,#0x24
000014  a107              ADR      r1,|L150.52|
000016  a016              ADR      r0,|L150.112|
000018  f7fffffe          BL       mbed_assert_internal
                  |L150.28|
00001c  bf00              NOP      
00001e  b11e              CBZ      r6,|L150.40|
000020  68e1              LDR      r1,[r4,#0xc]
000022  6860              LDR      r0,[r4,#4]
000024  6008              STR      r0,[r1,#0]
000026  e002              B        |L150.46|
                  |L150.40|
000028  6921              LDR      r1,[r4,#0x10]
00002a  6860              LDR      r0,[r4,#4]
00002c  6008              STR      r0,[r1,#0]
                  |L150.46|
00002e  bf00              NOP      
;;;76         }
000030  bd70              POP      {r4-r6,pc}
;;;77     
                          ENDP

000032  0000              DCW      0x0000
                  |L150.52|
000034  6d626564          DCB      "mbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/gpio_obje"
000038  2f544152
00003c  4745545f
000040  4c504331
000044  3736382f
000048  54415247
00004c  45545f4e
000050  58502f54
000054  41524745
000058  545f4c50
00005c  43313736
000060  582f6770
000064  696f5f6f
000068  626a65  
00006b  63742e68          DCB      "ct.h",0
00006f  00      
                  |L150.112|
000070  6f626a2d          DCB      "obj->pin != (PinName)NC",0
000074  3e70696e
000078  20213d20
00007c  2850696e
000080  4e616d65
000084  294e4300

                          AREA ||area_number.151||, COMGROUP=_ZN4mbed10DigitalOut5writeEi, LINKORDER=||i._ZN4mbed10DigitalOut5writeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.151||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed10DigitalOut5writeEi||
                          DCD      0x00000001

                          AREA ||i._ZN4mbed10DigitalOutC1E7PinNamei||, COMGROUP=_ZN4mbed10DigitalOutC1E7PinNamei, CODE, READONLY, ALIGN=1

                  _ZN4mbed10DigitalOutC2E7PinNamei                  ; Alternate entry point ; mbed::DigitalOut::DigitalOut__sub_object(PinName, int)
                  _ZN4mbed10DigitalOutC1E7PinNamei PROC ; mbed::DigitalOut::DigitalOut(PinName, int)
;;;62          */
;;;63         DigitalOut(PinName pin, int value) : gpio() {
;;;64             // No lock needed in the constructor
;;;65             gpio_init_out_ex(&gpio, pin, value);
;;;66         }
;;;67     
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  2118              MOVS     r1,#0x18
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_memclr4
000010  4632              MOV      r2,r6
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       gpio_init_out_ex
00001a  4620              MOV      r0,r4
00001c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.158||, COMGROUP=_ZN4mbed10DigitalOutC1E7PinNamei, LINKORDER=||i._ZN4mbed10DigitalOutC1E7PinNamei||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.158||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4mbed10DigitalOutC1E7PinNamei||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops||, COMGROUP=_ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops, DATA, READONLY, ALIGN=2

                  _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops ; void mbed::Callback<void()>::generate<void(*)()>(const T1&)::ops
                          DCD      _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv ; void mbed::Callback<void()>::function_call<void(*)()>(const void*)
                          DCD      _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv ; void mbed::Callback<void()>::function_move<void(*)()>(void*, const void*)
                          DCD      _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv ; void mbed::Callback<void()>::function_dtor<void(*)()>(void*)

                          AREA ||t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv||, COMGROUP=_ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv, CODE, READONLY, ALIGN=1

                  _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv PROC ; void mbed::Callback<void()>::function_call<void(*)()>(const void*)
;;;613        template <typename F>
;;;614        static R function_call(const void *p) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;615            return (*(F*)p)();
000004  6820              LDR      r0,[r4,#0]
000006  4780              BLX      r0
;;;616        }
000008  bd10              POP      {r4,pc}
;;;617    
                          ENDP


                          AREA ||area_number.167||, COMGROUP=_ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv, LINKORDER=||t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.167||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv||
                          DCD      0x00000001

                          AREA ||t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv||, COMGROUP=_ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv, CODE, READONLY, ALIGN=1

                  _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv PROC ; void mbed::Callback<void()>::function_move<void(*)()>(void*, const void*)
;;;618        template <typename F>
;;;619        static void function_move(void *d, const void *p) {
000000  bf00              NOP      
000002  bf00              NOP      
;;;620            new (d) F(*(F*)p);
000004  1e02              SUBS     r2,r0,#0
000006  d001              BEQ      |L173.12|
000008  680b              LDR      r3,[r1,#0]
00000a  6013              STR      r3,[r2,#0]
                  |L173.12|
;;;621        }
00000c  4770              BX       lr
;;;622    
                          ENDP


                          AREA ||area_number.174||, COMGROUP=_ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv, LINKORDER=||t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.174||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv||
                          DCD      0x00000001

                          AREA ||t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv||, COMGROUP=_ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv, CODE, READONLY, ALIGN=1

                  _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv PROC ; void mbed::Callback<void()>::function_dtor<void(*)()>(void*)
;;;623        template <typename F>
;;;624        static void function_dtor(void *p) {
000000  4770              BX       lr
;;;625            ((F*)p)->~F();
;;;626        }
;;;627    
                          ENDP


                          AREA ||area_number.181||, COMGROUP=_ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv, LINKORDER=||t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.181||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_main___Z7__REV16j|
#line 138 "mbed/TARGET_LPC1768/core_cmInstr.h"
|__asm___8_main_cpp_main___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_main___Z7__REVSHi|
#line 153
|__asm___8_main_cpp_main___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_main___Z5__RRXj|
#line 328
|__asm___8_main_cpp_main___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
