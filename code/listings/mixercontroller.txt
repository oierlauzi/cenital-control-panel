; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --gnu -o.\build\mixercontroller.o --asm_dir=.\listings\ --list_dir=.\listings\ --depend=.\build\mixercontroller.d --cpu=Cortex-M3 --apcs=interwork/interwork -O0 --diag_suppress=9931,951,1361 --preinclude=mbed/mbed_config.h -I. -Imbed/. -Imbed/TARGET_LPC1768 -Imbed/TARGET_LPC1768/TARGET_NXP -Imbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X -Imbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/TARGET_MBED_LPC1768 -Imbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/device -Imbed/TARGET_LPC1768/TOOLCHAIN_ARM_STD -Imbed/drivers -Imbed/hal -Imbed/platform -DDEVICE_RTC=1 -DDEVICE_SLEEP=1 -DTOOLCHAIN_object -DTOOLCHAIN_ARM_STD -DDEVICE_SEMIHOST=1 -DFEATURE_LWIP=1 -D__ASSERT_MSG -DTARGET_LPC1768 -DTARGET_RELEASE -DDEVICE_PORTINOUT=1 -D__CORTEX_M3 -DDEVICE_DEBUG_AWARENESS=1 -DTARGET_M3 -DDEVICE_CAN=1 -DDEVICE_PORTOUT=1 -DDEVICE_STDIO_MESSAGES=1 -DDEVICE_ANALOGOUT=1 -DARM_MATH_CM3 -DTARGET_LIKE_CORTEX_M3 -DDEVICE_ANALOGIN=1 -DDEVICE_PORTIN=1 -DTARGET_CORTEX_M -DDEVICE_ERROR_PATTERN=1 -DMBED_BUILD_TIMESTAMP=1497285907.81 -DDEVICE_ETHERNET=1 -DTARGET_LPCTarget -DDEVICE_I2C=1 -DTOOLCHAIN_ARM -DDEVICE_INTERRUPTIN=1 -DTARGET_UVISOR_UNSUPPORTED -DDEVICE_PWMOUT=1 -DTARGET_LIKE_MBED -DDEVICE_SPI=1 -D__MBED__=1 -DDEVICE_SPISLAVE=1 -DDEVICE_SERIAL_FC=1 -DDEVICE_LOCALFILESYSTEM=1 -DDEVICE_SERIAL=1 -DTARGET_LPC176X -DDEVICE_I2CSLAVE=1 -D__CMSIS_RTOS -DTARGET_NXP -DTARGET_MBED_LPC1768 -D__MBED_CMSIS_RTOS_CM -D__UVISION_VERSION=528 -DLPC175x_6x --omf_browse=.\build\mixercontroller.crf --no_depend_system_headers --no_rtti MixerController.cpp]
                          THUMB

                          AREA ||i._ZN15MixerController14setCutCallbackEPFvPvE||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController14setCutCallbackEPFvPvE PROC ; MixerController::setCutCallback(void(*)(void*))
;;;116    					
;;;117    void MixerController::setCutCallback(ActionCallback cbk) {
000000  61c1              STR      r1,[r0,#0x1c]
;;;118    		m_cutCallback = cbk;
;;;119    }
000002  4770              BX       lr
;;;120    
                          ENDP


                          AREA ||i._ZN15MixerController14setLedCallbackEPFvPvSt6bitsetILj16EEE||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController14setLedCallbackEPFvPvSt6bitsetILj16EEE PROC ; MixerController::setLedCallback(void(*)(void*, std::bitset<(unsigned)16>))
;;;65     
;;;66     void MixerController::setLedCallback(LedStateCallback cbk) {
000000  6041              STR      r1,[r0,#4]
;;;67     	m_ledCallback = cbk;
;;;68     }
000002  4770              BX       lr
;;;69     	
                          ENDP


                          AREA ||i._ZN15MixerController17setCutUserPointerEPv||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController17setCutUserPointerEPv PROC ; MixerController::setCutUserPointer(void*)
;;;108    
;;;109    void MixerController::setCutUserPointer(void* usrPtr) {
000000  6181              STR      r1,[r0,#0x18]
;;;110    	m_cutUserPtr = usrPtr;
;;;111    }
000002  4770              BX       lr
;;;112    
                          ENDP


                          AREA ||i._ZN15MixerController17setLedUserPointerEPv||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController17setLedUserPointerEPv PROC ; MixerController::setLedUserPointer(void*)
;;;57     
;;;58     void MixerController::setLedUserPointer(void* usrPtr) {
000000  6001              STR      r1,[r0,#0]
;;;59     	m_ledUserPtr = usrPtr;
;;;60     }
000002  4770              BX       lr
;;;61     
                          ENDP


                          AREA ||i._ZN15MixerController18setPreviewCallbackEPFvPvjE||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController18setPreviewCallbackEPFvPvjE PROC ; MixerController::setPreviewCallback(void(*)(void*, unsigned))
;;;99     					
;;;100    void MixerController::setPreviewCallback(BusCallback cbk) {
000000  6141              STR      r1,[r0,#0x14]
;;;101    		m_previewCallback = cbk;
;;;102    }
000002  4770              BX       lr
;;;103    
                          ENDP


                          AREA ||i._ZN15MixerController18setProgramCallbackEPFvPvjE||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController18setProgramCallbackEPFvPvjE PROC ; MixerController::setProgramCallback(void(*)(void*, unsigned))
;;;82     
;;;83     void MixerController::setProgramCallback(BusCallback cbk) {
000000  60c1              STR      r1,[r0,#0xc]
;;;84     	m_programCallback = cbk;
;;;85     }
000002  4770              BX       lr
;;;86     
                          ENDP


                          AREA ||i._ZN15MixerController21setPreviewUserPointerEPv||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController21setPreviewUserPointerEPv PROC ; MixerController::setPreviewUserPointer(void*)
;;;91     
;;;92     void MixerController::setPreviewUserPointer(void* usrPtr) {
000000  6101              STR      r1,[r0,#0x10]
;;;93     	m_previewUserPtr = usrPtr;
;;;94     }
000002  4770              BX       lr
;;;95     
                          ENDP


                          AREA ||i._ZN15MixerController21setProgramUserPointerEPv||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController21setProgramUserPointerEPv PROC ; MixerController::setProgramUserPointer(void*)
;;;74     
;;;75     void MixerController::setProgramUserPointer(void* usrPtr) {
000000  6081              STR      r1,[r0,#8]
;;;76     	m_programUserPtr = usrPtr;
;;;77     }
000002  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i._ZN15MixerController21setTransitionCallbackEPFvPvE||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController21setTransitionCallbackEPFvPvE PROC ; MixerController::setTransitionCallback(void(*)(void*))
;;;133    					
;;;134    void MixerController::setTransitionCallback(ActionCallback cbk) {
000000  6241              STR      r1,[r0,#0x24]
;;;135    		m_transitionCallback = cbk;
;;;136    }
000002  4770              BX       lr
;;;137    
                          ENDP


                          AREA ||i._ZN15MixerController24setTransitionUserPointerEPv||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController24setTransitionUserPointerEPv PROC ; MixerController::setTransitionUserPointer(void*)
;;;125    
;;;126    void MixerController::setTransitionUserPointer(void* usrPtr) {
000000  6201              STR      r1,[r0,#0x20]
;;;127    	m_transitionUserPtr = usrPtr;
;;;128    }
000002  4770              BX       lr
;;;129    
                          ENDP


                          AREA ||i._ZN15MixerController7processESt6bitsetILj24EE||, CODE, READONLY, ALIGN=1

                  _ZN15MixerController7processESt6bitsetILj24EE PROC ; MixerController::process(std::bitset<(unsigned)24>)
;;;143    
;;;144    void MixerController::process(ButtonState buttonState) {	
000000  e92d43f3          PUSH     {r0,r1,r4-r9,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
;;;145    	//La entrada se encuentra en activo bajo por las resistencias pullup
;;;146    	buttonState.flip(); //Cambia a activo alto (negar)
000008  a804              ADD      r0,sp,#0x10
00000a  f7fffffe          BL       _ZNSt6bitsetILj24EE4flipEv ; std::bitset<(unsigned)24>::flip()
;;;147    	
;;;148    	//Obtiene los botones que estan en flanco de subida
;;;149    	const ButtonState risingEdge = getRisingEdge(m_lastState, buttonState);
00000e  a904              ADD      r1,sp,#0x10
000010  f1040028          ADD      r0,r4,#0x28
000014  f7fffffe          BL       _Z13getRisingEdgeILj24EESt6bitsetIXT_EERKS0_IXT_EERKS0_IXT_EE ; std::bitset<T1> getRisingEdge<(unsigned)24>(const std::bitset<T1>&, const std::bitset<T1>&)
000018  9002              STR      r0,[sp,#8]
;;;150    	m_lastState = buttonState;
00001a  9804              LDR      r0,[sp,#0x10]
00001c  62a0              STR      r0,[r4,#0x28]
;;;151    	
;;;152    	
;;;153    	//Obtine los nuevos indices. Encontrar cero ya que los pulsadores están pullup
;;;154    	const size_t newPgm = firstOne(risingEdge, BUTTON_INDEX_PROGRAM0, BUTTON_INDEX_PROGRAM0 + PROGRAM_CNT) - BUTTON_INDEX_PROGRAM0;
00001e  2208              MOVS     r2,#8
000020  2100              MOVS     r1,#0
000022  a802              ADD      r0,sp,#8
000024  f7fffffe          BL       _Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj ; unsigned firstOne<(unsigned)24>(const std::bitset<T1>&, unsigned, unsigned)
000028  4605              MOV      r5,r0
;;;155    	const size_t newPvw = firstOne(risingEdge, BUTTON_INDEX_PREVIEW0, BUTTON_INDEX_PREVIEW0 + PREVIEW_CNT) - BUTTON_INDEX_PREVIEW0;
00002a  2210              MOVS     r2,#0x10
00002c  2108              MOVS     r1,#8
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       _Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj ; unsigned firstOne<(unsigned)24>(const std::bitset<T1>&, unsigned, unsigned)
000034  f1a00608          SUB      r6,r0,#8
;;;156    	
;;;157    	
;;;158    	//Si ha cambiado alguno de ellos llamar a la rutina correspondiente
;;;159    	bool updateLeds = false;
000038  f04f0900          MOV      r9,#0
;;;160    	if(newPgm < PROGRAM_CNT) {
00003c  2d08              CMP      r5,#8
00003e  d20f              BCS      |L11.96|
;;;161    		//Se ha pulsado algun boton de programa. Si es el mismo desactivar, si no, cambiar
;;;162    		updateLeds = true;
000040  f04f0901          MOV      r9,#1
;;;163    		m_program = (m_program != newPgm) ? newPgm : NO_SIGNAL;
000044  6ae0              LDR      r0,[r4,#0x2c]
000046  42a8              CMP      r0,r5
000048  d001              BEQ      |L11.78|
00004a  4628              MOV      r0,r5
00004c  e001              B        |L11.82|
                  |L11.78|
00004e  f64f70ff          MOV      r0,#0xffff
                  |L11.82|
000052  62e0              STR      r0,[r4,#0x2c]
;;;164    		
;;;165    		//Llamar a la rutina de atencion correspondiente
;;;166    		if(m_programCallback) {
000054  68e0              LDR      r0,[r4,#0xc]
000056  b118              CBZ      r0,|L11.96|
;;;167    			m_programCallback(m_programUserPtr, m_program);
000058  e9d40202          LDRD     r0,r2,[r4,#8]
00005c  6ae1              LDR      r1,[r4,#0x2c]
00005e  4790              BLX      r2
                  |L11.96|
;;;168    		}
;;;169    	}
;;;170    	if(newPvw < PREVIEW_CNT) {
000060  2e08              CMP      r6,#8
000062  d20f              BCS      |L11.132|
;;;171    		//Se ha pulsado algun boton de previo. Si es el mismo desactivar, si no, cambiar
;;;172    		updateLeds = true;
000064  f04f0901          MOV      r9,#1
;;;173    		m_preview = (m_preview != newPvw) ? newPvw : NO_SIGNAL;
000068  6b20              LDR      r0,[r4,#0x30]
00006a  42b0              CMP      r0,r6
00006c  d001              BEQ      |L11.114|
00006e  4630              MOV      r0,r6
000070  e001              B        |L11.118|
                  |L11.114|
000072  f64f70ff          MOV      r0,#0xffff
                  |L11.118|
000076  6320              STR      r0,[r4,#0x30]
;;;174    		
;;;175    		//Llamar a la rutina de atencion correspondiente
;;;176    		if(m_previewCallback) {
000078  6960              LDR      r0,[r4,#0x14]
00007a  b118              CBZ      r0,|L11.132|
;;;177    			m_previewCallback(m_previewUserPtr, m_preview);
00007c  e9d40204          LDRD     r0,r2,[r4,#0x10]
000080  6b21              LDR      r1,[r4,#0x30]
000082  4790              BLX      r2
                  |L11.132|
;;;178    		}
;;;179    	}
;;;180    	if(risingEdge.test(BUTTON_INDEX_CUT)) {
000084  2113              MOVS     r1,#0x13
000086  a802              ADD      r0,sp,#8
000088  f7fffffe          BL       _ZNKSt6bitsetILj24EE4testEj ; std::bitset<(unsigned)24>::test(unsigned) const
00008c  b158              CBZ      r0,|L11.166|
;;;181    		updateLeds = true;
00008e  f04f0901          MOV      r9,#1
;;;182    		std::swap(m_program, m_preview);
000092  f1040130          ADD      r1,r4,#0x30
000096  1f08              SUBS     r0,r1,#4
000098  f7fffffe          BL       _ZSt4swapIjEvRT_S1_ ; void std::swap<unsigned>(T1&, T1&)
;;;183    		
;;;184    		//Llamar a la rutina de atencion correspondiente
;;;185    		if(m_cutCallback) {
00009c  69e0              LDR      r0,[r4,#0x1c]
00009e  b110              CBZ      r0,|L11.166|
;;;186    			m_cutCallback(m_cutUserPtr);
0000a0  e9d40106          LDRD     r0,r1,[r4,#0x18]
0000a4  4788              BLX      r1
                  |L11.166|
;;;187    		}
;;;188    	}
;;;189    	if(risingEdge.test(BUTTON_INDEX_TRANSITION)) {
0000a6  2112              MOVS     r1,#0x12
0000a8  a802              ADD      r0,sp,#8
0000aa  f7fffffe          BL       _ZNKSt6bitsetILj24EE4testEj ; std::bitset<(unsigned)24>::test(unsigned) const
0000ae  b158              CBZ      r0,|L11.200|
;;;190    		updateLeds = true;
0000b0  f04f0901          MOV      r9,#1
;;;191    		std::swap(m_program, m_preview); //TODO llamar cuando se complete la transicion
0000b4  f1040130          ADD      r1,r4,#0x30
0000b8  1f08              SUBS     r0,r1,#4
0000ba  f7fffffe          BL       _ZSt4swapIjEvRT_S1_ ; void std::swap<unsigned>(T1&, T1&)
;;;192    		
;;;193    		//Llamar a la rutina de atencion correspondiente
;;;194    		if(m_transitionCallback) {
0000be  6a60              LDR      r0,[r4,#0x24]
0000c0  b110              CBZ      r0,|L11.200|
;;;195    			m_transitionCallback(m_transitionUserPtr);
0000c2  e9d40108          LDRD     r0,r1,[r4,#0x20]
0000c6  4788              BLX      r1
                  |L11.200|
;;;196    		}
;;;197    	}
;;;198    	
;;;199    	
;;;200    	//Si el estado de los leds cambia, calcular los nuevos
;;;201    	if(updateLeds && m_ledCallback) {
0000c8  f1b90f00          CMP      r9,#0
0000cc  d020              BEQ      |L11.272|
0000ce  6860              LDR      r0,[r4,#4]
0000d0  b1f0              CBZ      r0,|L11.272|
;;;202    		LedState ledState;
0000d2  a801              ADD      r0,sp,#4
0000d4  bf00              NOP      
0000d6  2100              MOVS     r1,#0
0000d8  6001              STR      r1,[r0,#0]
0000da  bf00              NOP      
0000dc  bf00              NOP      
;;;203    		
;;;204    		//Calcular los indices de los leds a encender
;;;205    		const size_t pgmLed = LED_INDEX_PROGRAM0 + m_program;
0000de  6ae0              LDR      r0,[r4,#0x2c]
0000e0  f1000708          ADD      r7,r0,#8
;;;206    		const size_t pvwLed = LED_INDEX_PREVIEW0 + m_preview;
0000e4  f8d48030          LDR      r8,[r4,#0x30]
;;;207    		
;;;208    		//Solo encender si son validos
;;;209    		if(pgmLed < (LED_INDEX_PROGRAM0 + PROGRAM_CNT)) {
0000e8  2f10              CMP      r7,#0x10
0000ea  d204              BCS      |L11.246|
;;;210    			ledState.set(pgmLed, true);
0000ec  2201              MOVS     r2,#1
0000ee  4639              MOV      r1,r7
0000f0  a801              ADD      r0,sp,#4
0000f2  f7fffffe          BL       _ZNSt6bitsetILj16EE3setEjb ; std::bitset<(unsigned)16>::set(unsigned, bool)
                  |L11.246|
;;;211    		}
;;;212    		if(pvwLed < (LED_INDEX_PREVIEW0 + PREVIEW_CNT)) {
0000f6  f1b80f08          CMP      r8,#8
0000fa  d204              BCS      |L11.262|
;;;213    			ledState.set(pvwLed, true);
0000fc  2201              MOVS     r2,#1
0000fe  4641              MOV      r1,r8
000100  a801              ADD      r0,sp,#4
000102  f7fffffe          BL       _ZNSt6bitsetILj16EE3setEjb ; std::bitset<(unsigned)16>::set(unsigned, bool)
                  |L11.262|
;;;214    		}
;;;215    		
;;;216    		//Llamar a la funcion
;;;217    		m_ledCallback(m_ledUserPtr, ledState);
000106  e9d40200          LDRD     r0,r2,[r4,#0]
00010a  9901              LDR      r1,[sp,#4]
00010c  4790              BLX      r2
;;;218    	}
00010e  bf00              NOP      
                  |L11.272|
;;;219    }
000110  b005              ADD      sp,sp,#0x14
000112  e8bd83f0          POP      {r4-r9,pc}
;;;1      /***************************************************************************
                          ENDP


                          AREA ||i._ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_||, CODE, READONLY, ALIGN=1

                  _ZN15MixerControllerC2EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_                  ; Alternate entry point ; MixerController::MixerController__sub_object(void*, void(*)(void*, std::bitset<(unsigned)16>), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))
                  _ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_ PROC ; MixerController::MixerController(void*, void(*)(void*, std::bitset<(unsigned)16>), void*, void(*)(void*, unsigned), void*, void(*)(void*, unsigned), void*, void(*)(void*), void*, void(*)(void*))
;;;30     
;;;31     MixerController::MixerController(	void* ledUsrPtr,
;;;32     																	LedStateCallback ledCbk,
;;;33     																	void*	pgmUsrPtr,
;;;34     																	BusCallback pgmCbk,
;;;35     																	void*	pvwUsrPtr,
;;;36     																	BusCallback pvwCbk,
;;;37     																	void*	cutUsrPtr,
;;;38     																	ActionCallback cutCbk,
;;;39     																	void*	transUsrPtr,
;;;40     																	ActionCallback transCbk																	)
;;;41     	: m_ledUserPtr(ledUsrPtr)
;;;42     	, m_ledCallback(ledCbk)
;;;43     	, m_programUserPtr(pgmUsrPtr)
;;;44     	, m_programCallback(pgmCbk)
;;;45     	, m_previewUserPtr(pvwUsrPtr)
;;;46     	, m_previewCallback(pvwCbk)
;;;47     	,	m_cutUserPtr(cutUsrPtr)
;;;48     	, m_cutCallback(cutCbk)
;;;49     	, m_transitionUserPtr(transUsrPtr)
;;;50     	, m_transitionCallback(transCbk)
;;;51     	, m_program(8)
;;;52     	, m_preview(8)
;;;53     {
;;;54     }
;;;55     	
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ac09              ADD      r4,sp,#0x24
000006  e89410f0          LDM      r4,{r4-r7,r12}
00000a  e9dd890e          LDRD     r8,r9,[sp,#0x38]
00000e  6001              STR      r1,[r0,#0]
000010  6042              STR      r2,[r0,#4]
000012  6083              STR      r3,[r0,#8]
000014  60c4              STR      r4,[r0,#0xc]
000016  6105              STR      r5,[r0,#0x10]
000018  6146              STR      r6,[r0,#0x14]
00001a  6187              STR      r7,[r0,#0x18]
00001c  f8c0c01c          STR      r12,[r0,#0x1c]
000020  f8c08020          STR      r8,[r0,#0x20]
000024  f8c09024          STR      r9,[r0,#0x24]
000028  f1000a28          ADD      r10,r0,#0x28
00002c  bf00              NOP      
00002e  f04f0b00          MOV      r11,#0
000032  f8cab000          STR      r11,[r10,#0]
000036  bf00              NOP      
000038  bf00              NOP      
00003a  f1aa0028          SUB      r0,r10,#0x28
00003e  f04f0a08          MOV      r10,#8
000042  f8c0a02c          STR      r10,[r0,#0x2c]
000046  f8c0a030          STR      r10,[r0,#0x30]
00004a  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i._ZNK15MixerController14getCutCallbackEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController14getCutCallbackEv PROC ; MixerController::getCutCallback() const
;;;120    
;;;121    MixerController::ActionCallback MixerController::getCutCallback() const {
000000  4601              MOV      r1,r0
;;;122    	return m_cutCallback;
000002  69c8              LDR      r0,[r1,#0x1c]
;;;123    }
000004  4770              BX       lr
;;;124    
                          ENDP


                          AREA ||i._ZNK15MixerController14getLedCallbackEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController14getLedCallbackEv PROC ; MixerController::getLedCallback() const
;;;69     	
;;;70     MixerController::LedStateCallback MixerController::getLedCallback() const {
000000  4601              MOV      r1,r0
;;;71     	return m_ledCallback;
000002  6848              LDR      r0,[r1,#4]
;;;72     }
000004  4770              BX       lr
;;;73     									
                          ENDP


                          AREA ||i._ZNK15MixerController17getCutUserPointerEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController17getCutUserPointerEv PROC ; MixerController::getCutUserPointer() const
;;;112    
;;;113    void* MixerController::getCutUserPointer() const {
000000  4601              MOV      r1,r0
;;;114    	return m_cutUserPtr;
000002  6988              LDR      r0,[r1,#0x18]
;;;115    }
000004  4770              BX       lr
;;;116    					
                          ENDP


                          AREA ||i._ZNK15MixerController17getLedUserPointerEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController17getLedUserPointerEv PROC ; MixerController::getLedUserPointer() const
;;;61     
;;;62     void* MixerController::getLedUserPointer() const {
000000  4601              MOV      r1,r0
;;;63     	return m_ledUserPtr;
000002  6808              LDR      r0,[r1,#0]
;;;64     }
000004  4770              BX       lr
;;;65     
                          ENDP


                          AREA ||i._ZNK15MixerController18getPreviewCallbackEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController18getPreviewCallbackEv PROC ; MixerController::getPreviewCallback() const
;;;103    
;;;104    MixerController::BusCallback MixerController::getPreviewCallback() const {
000000  4601              MOV      r1,r0
;;;105    	return m_previewCallback;
000002  6948              LDR      r0,[r1,#0x14]
;;;106    }
000004  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||i._ZNK15MixerController18getProgramCallbackEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController18getProgramCallbackEv PROC ; MixerController::getProgramCallback() const
;;;86     
;;;87     MixerController::BusCallback MixerController::getProgramCallback() const {
000000  4601              MOV      r1,r0
;;;88     	return m_programCallback;
000002  68c8              LDR      r0,[r1,#0xc]
;;;89     }
000004  4770              BX       lr
;;;90     	
                          ENDP


                          AREA ||i._ZNK15MixerController21getPreviewUserPointerEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController21getPreviewUserPointerEv PROC ; MixerController::getPreviewUserPointer() const
;;;95     
;;;96     void* MixerController::getPreviewUserPointer() const {
000000  4601              MOV      r1,r0
;;;97     	return m_previewUserPtr;
000002  6908              LDR      r0,[r1,#0x10]
;;;98     }
000004  4770              BX       lr
;;;99     					
                          ENDP


                          AREA ||i._ZNK15MixerController21getProgramUserPointerEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController21getProgramUserPointerEv PROC ; MixerController::getProgramUserPointer() const
;;;78     
;;;79     void* MixerController::getProgramUserPointer() const {
000000  4601              MOV      r1,r0
;;;80     	return m_programUserPtr;
000002  6888              LDR      r0,[r1,#8]
;;;81     }
000004  4770              BX       lr
;;;82     
                          ENDP


                          AREA ||i._ZNK15MixerController21getTransitionCallbackEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController21getTransitionCallbackEv PROC ; MixerController::getTransitionCallback() const
;;;137    
;;;138    MixerController::ActionCallback MixerController::getTransitionCallback() const {
000000  4601              MOV      r1,r0
;;;139    	return m_transitionCallback;
000002  6a48              LDR      r0,[r1,#0x24]
;;;140    }
000004  4770              BX       lr
;;;141    
                          ENDP


                          AREA ||i._ZNK15MixerController24getTransitionUserPointerEv||, CODE, READONLY, ALIGN=1

                  _ZNK15MixerController24getTransitionUserPointerEv PROC ; MixerController::getTransitionUserPointer() const
;;;129    
;;;130    void* MixerController::getTransitionUserPointer() const {
000000  4601              MOV      r1,r0
;;;131    	return m_transitionUserPtr;
000002  6a08              LDR      r0,[r1,#0x20]
;;;132    }
000004  4770              BX       lr
;;;133    					
                          ENDP


                          AREA ||t._Z13getRisingEdgeILj24EESt6bitsetIXT_EERKS0_IXT_EERKS0_IXT_EE||, CODE, READONLY, ALIGN=1

                  _Z13getRisingEdgeILj24EESt6bitsetIXT_EERKS0_IXT_EERKS0_IXT_EE PROC ; std::bitset<T1> getRisingEdge<(unsigned)24>(const std::bitset<T1>&, const std::bitset<T1>&)
;;;9      template<size_t C>
;;;10     static std::bitset<C> getRisingEdge(const std::bitset<C>& prev, const std::bitset<C>& next) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;11     	return ~prev & next;
000006  bf00              NOP      
000008  6828              LDR      r0,[r5,#0]
00000a  9000              STR      r0,[sp,#0]
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       _ZNSt6bitsetILj24EE4flipEv ; std::bitset<(unsigned)24>::flip()
000012  6800              LDR      r0,[r0,#0]
000014  4626              MOV      r6,r4
000016  9002              STR      r0,[sp,#8]
000018  9802              LDR      r0,[sp,#8]
00001a  9000              STR      r0,[sp,#0]
00001c  4669              MOV      r1,sp
00001e  4632              MOV      r2,r6
000020  bf00              NOP      
000022  2000              MOVS     r0,#0
000024  e007              B        |L23.54|
                  |L23.38|
000026  f8513020          LDR      r3,[r1,r0,LSL #2]
00002a  f8527020          LDR      r7,[r2,r0,LSL #2]
00002e  403b              ANDS     r3,r3,r7
000030  f8413020          STR      r3,[r1,r0,LSL #2]
000034  1c40              ADDS     r0,r0,#1
                  |L23.54|
000036  2801              CMP      r0,#1
000038  d1f5              BNE      |L23.38|
00003a  6808              LDR      r0,[r1,#0]
00003c  9001              STR      r0,[sp,#4]
;;;12     }
00003e  bdfe              POP      {r1-r7,pc}
;;;13     
                          ENDP


                          AREA ||t._Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj||, CODE, READONLY, ALIGN=1

                  _Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj PROC ; unsigned firstOne<(unsigned)24>(const std::bitset<T1>&, unsigned, unsigned)
;;;22     template<size_t C>
;;;23     static size_t firstOne(const std::bitset<C>& bs, size_t first, size_t last) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;24     	while(first < last && !bs.test(first)) ++first;
000008  e000              B        |L24.12|
                  |L24.10|
00000a  1c64              ADDS     r4,r4,#1
                  |L24.12|
00000c  42ac              CMP      r4,r5
00000e  d205              BCS      |L24.28|
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       _ZNKSt6bitsetILj24EE4testEj ; std::bitset<(unsigned)24>::test(unsigned) const
000018  2800              CMP      r0,#0
00001a  d0f6              BEQ      |L24.10|
                  |L24.28|
;;;25     	return first;
00001c  4620              MOV      r0,r4
;;;26     }
00001e  bd70              POP      {r4-r6,pc}
;;;27     
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||t._Z13getRisingEdgeILj24EESt6bitsetIXT_EERKS0_IXT_EERKS0_IXT_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||t._Z13getRisingEdgeILj24EESt6bitsetIXT_EERKS0_IXT_EERKS0_IXT_EE||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||t._Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._Z8firstOneILj24EEjRKSt6bitsetIXT_EEjj||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerControllerC1EPvPFvS0_St6bitsetILj16EEES0_PFvS0_jES0_S6_S0_PFvS0_ES0_S8_||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN15MixerController17setLedUserPointerEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController17setLedUserPointerEPv||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZNK15MixerController17getLedUserPointerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController17getLedUserPointerEv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN15MixerController14setLedCallbackEPFvPvSt6bitsetILj16EEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController14setLedCallbackEPFvPvSt6bitsetILj16EEE||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZNK15MixerController14getLedCallbackEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController14getLedCallbackEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN15MixerController21setProgramUserPointerEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController21setProgramUserPointerEPv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZNK15MixerController21getProgramUserPointerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController21getProgramUserPointerEv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN15MixerController18setProgramCallbackEPFvPvjE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController18setProgramCallbackEPFvPvjE||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZNK15MixerController18getProgramCallbackEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController18getProgramCallbackEv||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN15MixerController21setPreviewUserPointerEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController21setPreviewUserPointerEPv||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZNK15MixerController21getPreviewUserPointerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController21getPreviewUserPointerEv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN15MixerController18setPreviewCallbackEPFvPvjE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController18setPreviewCallbackEPFvPvjE||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZNK15MixerController18getPreviewCallbackEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController18getPreviewCallbackEv||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN15MixerController17setCutUserPointerEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController17setCutUserPointerEPv||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZNK15MixerController17getCutUserPointerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController17getCutUserPointerEv||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN15MixerController14setCutCallbackEPFvPvE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController14setCutCallbackEPFvPvE||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZNK15MixerController14getCutCallbackEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController14getCutCallbackEv||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN15MixerController24setTransitionUserPointerEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController24setTransitionUserPointerEPv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZNK15MixerController24getTransitionUserPointerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController24getTransitionUserPointerEv||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN15MixerController21setTransitionCallbackEPFvPvE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController21setTransitionCallbackEPFvPvE||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZNK15MixerController21getTransitionCallbackEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK15MixerController21getTransitionCallbackEv||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN15MixerController7processESt6bitsetILj24EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN15MixerController7processESt6bitsetILj24EE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZNKSt6bitsetILj24EE4testEjEs||, COMGROUP=_ZZNKSt6bitsetILj24EE4testEjEs, DATA, READONLY, ALIGN=0

                  _ZZNKSt6bitsetILj24EE4testEjEs ; std::bitset<(unsigned)24>::test(unsigned) const::string
000000  00                DCB      0x00

                          AREA ||.constdata__ZZNSt6bitsetILj16EE3setEjbEs||, COMGROUP=_ZZNSt6bitsetILj16EE3setEjbEs, DATA, READONLY, ALIGN=0

                  _ZZNSt6bitsetILj16EE3setEjbEs ; std::bitset<(unsigned)16>::set(unsigned, bool)::string
000000  00                DCB      0x00

                          AREA ||t._ZNSt6bitsetILj24EE4flipEv||, COMGROUP=_ZNSt6bitsetILj24EE4flipEv, CODE, READONLY, ALIGN=1

                  _ZNSt6bitsetILj24EE4flipEv PROC ; std::bitset<(unsigned)24>::flip()
;;;192        // 23.3.5.2, p25
;;;193        bitset& flip () _THROWS (()) {
000000  2100              MOVS     r1,#0
;;;194            for (size_t __i = 0; __i != _C_nelems; __i++) 
000002  e005              B        |L155.16|
                  |L155.4|
;;;195                _C_bits [__i] = ~_C_bits [__i];
000004  f8502021          LDR      r2,[r0,r1,LSL #2]
000008  43d2              MVNS     r2,r2
00000a  f8402021          STR      r2,[r0,r1,LSL #2]
00000e  1c49              ADDS     r1,r1,#1              ;194
                  |L155.16|
000010  2901              CMP      r1,#1                 ;194
000012  d1f7              BNE      |L155.4|
;;;196            _C_bits [_C_nelems - !!_C_nelems] &=
000014  6801              LDR      r1,[r0,#0]
000016  f021417f          BIC      r1,r1,#0xff000000
00001a  6001              STR      r1,[r0,#0]
;;;197                ~0UL >> (_C_elembits - _Size % _C_elembits) % _C_elembits;
;;;198            return *this;
;;;199        }
00001c  4770              BX       lr
;;;200    
                          ENDP


                          AREA ||area_number.156||, COMGROUP=_ZNSt6bitsetILj24EE4flipEv, LINKORDER=||t._ZNSt6bitsetILj24EE4flipEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.156||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6bitsetILj24EE4flipEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt6bitsetILj24EE4testEj||, COMGROUP=_ZNKSt6bitsetILj24EE4testEj, CODE, READONLY, ALIGN=2

                  _ZNKSt6bitsetILj24EE4testEj PROC ; std::bitset<(unsigned)24>::test(unsigned) const
;;;269        // 23.3.5.2, p39
;;;270        bool test (size_t __pos) const {
000000  b538              PUSH     {r3-r5,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;271            _RWSTD_REQUIRES (_C_valid_pos (__pos),
000006  4620              MOV      r0,r4
000008  1c41              ADDS     r1,r0,#1
00000a  2919              CMP      r1,#0x19
00000c  d201              BCS      |L162.18|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L162.20|
                  |L162.18|
000012  2100              MOVS     r1,#0
                  |L162.20|
000014  b101              CBZ      r1,|L162.24|
000016  e007              B        |L162.40|
                  |L162.24|
000018  2001              MOVS     r0,#1
00001a  4623              MOV      r3,r4
00001c  4a09              LDR      r2,|L162.68|
00001e  4611              MOV      r1,r2
000020  9000              STR      r0,[sp,#0]
000022  2009              MOVS     r0,#9
000024  f7fffffe          BL       _ZN4__rw10__rw_throwEiz ; __rw::__rw_throw(int, ...)
                  |L162.40|
;;;272                             (_RWSTD_ERROR_OUT_OF_RANGE,
;;;273                              _RWSTD_FUNC ("bitset::test(size_t) const"),
;;;274                              __pos, _C_nelems));
;;;275    
;;;276            return !!(_C_bits [__pos / _C_elembits] & (1UL << __pos % _C_elembits));
000028  0960              LSRS     r0,r4,#5
00002a  f8550020          LDR      r0,[r5,r0,LSL #2]
00002e  f004021f          AND      r2,r4,#0x1f
000032  2101              MOVS     r1,#1
000034  4091              LSLS     r1,r1,r2
000036  4008              ANDS     r0,r0,r1
000038  b108              CBZ      r0,|L162.62|
00003a  2001              MOVS     r0,#1
                  |L162.60|
;;;277        }
00003c  bd38              POP      {r3-r5,pc}
                  |L162.62|
00003e  2000              MOVS     r0,#0                 ;276
000040  e7fc              B        |L162.60|
;;;278    
                          ENDP

000042  0000              DCW      0x0000
                  |L162.68|
                          DCD      _ZZNKSt6bitsetILj24EE4testEjEs ; std::bitset<(unsigned)24>::test(unsigned) const::string

                          AREA ||area_number.163||, COMGROUP=_ZNKSt6bitsetILj24EE4testEj, LINKORDER=||t._ZNKSt6bitsetILj24EE4testEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.163||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt6bitsetILj24EE4testEj||
                          DCD      0x00000001

                          AREA ||t._ZNSt6bitsetILj16EE3setEjb||, COMGROUP=_ZNSt6bitsetILj16EE3setEjb, CODE, READONLY, ALIGN=2

                  _ZNSt6bitsetILj16EE3setEjb PROC ; std::bitset<(unsigned)16>::set(unsigned, bool)
;;;323    inline bitset<_Size>&
;;;324    bitset<_Size>::set (size_t __pos, bool __val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;325    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;326        _RWSTD_REQUIRES (_C_valid_pos (__pos),
000008  4620              MOV      r0,r4
00000a  1c41              ADDS     r1,r0,#1
00000c  2911              CMP      r1,#0x11
00000e  d201              BCS      |L169.20|
000010  2101              MOVS     r1,#1
000012  e000              B        |L169.22|
                  |L169.20|
000014  2100              MOVS     r1,#0
                  |L169.22|
000016  b101              CBZ      r1,|L169.26|
000018  e007              B        |L169.42|
                  |L169.26|
00001a  2001              MOVS     r0,#1
00001c  4623              MOV      r3,r4
00001e  4a10              LDR      r2,|L169.96|
000020  4611              MOV      r1,r2
000022  9000              STR      r0,[sp,#0]
000024  2009              MOVS     r0,#9
000026  f7fffffe          BL       _ZN4__rw10__rw_throwEiz ; __rw::__rw_throw(int, ...)
                  |L169.42|
;;;327                         (_RWSTD_ERROR_OUT_OF_RANGE,
;;;328                          _RWSTD_FUNC ("bitset::set(size_t, bool)"),
;;;329                          __pos, _C_nelems));
;;;330    
;;;331        if (__val)
00002a  b15e              CBZ      r6,|L169.68|
;;;332            _C_bits [__pos / _C_elembits] |=  (1UL << __pos % _C_elembits);
00002c  0960              LSRS     r0,r4,#5
00002e  f8550020          LDR      r0,[r5,r0,LSL #2]
000032  f004021f          AND      r2,r4,#0x1f
000036  2101              MOVS     r1,#1
000038  4091              LSLS     r1,r1,r2
00003a  4308              ORRS     r0,r0,r1
00003c  0961              LSRS     r1,r4,#5
00003e  f8450021          STR      r0,[r5,r1,LSL #2]
000042  e00a              B        |L169.90|
                  |L169.68|
;;;333        else
;;;334            _C_bits [__pos / _C_elembits] &= ~(1UL << __pos % _C_elembits);
000044  0960              LSRS     r0,r4,#5
000046  f8550020          LDR      r0,[r5,r0,LSL #2]
00004a  f004021f          AND      r2,r4,#0x1f
00004e  2101              MOVS     r1,#1
000050  4091              LSLS     r1,r1,r2
000052  4388              BICS     r0,r0,r1
000054  0961              LSRS     r1,r4,#5
000056  f8450021          STR      r0,[r5,r1,LSL #2]
                  |L169.90|
;;;335        return *this;
00005a  4628              MOV      r0,r5
;;;336    }
00005c  bdf8              POP      {r3-r7,pc}
;;;337    
                          ENDP

00005e  0000              DCW      0x0000
                  |L169.96|
                          DCD      _ZZNSt6bitsetILj16EE3setEjbEs ; std::bitset<(unsigned)16>::set(unsigned, bool)::string

                          AREA ||area_number.170||, COMGROUP=_ZNSt6bitsetILj16EE3setEjb, LINKORDER=||t._ZNSt6bitsetILj16EE3setEjb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.170||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6bitsetILj16EE3setEjb||
                          DCD      0x00000001

                          AREA ||t._ZSt4swapIjEvRT_S1_||, COMGROUP=_ZSt4swapIjEvRT_S1_, CODE, READONLY, ALIGN=1

                  _ZSt4swapIjEvRT_S1_ PROC ; void std::swap<unsigned>(T1&, T1&)
;;;189    template <class _TypeT>
;;;190    inline void swap (_TypeT& __a, _TypeT& __b)
000000  6802              LDR      r2,[r0,#0]
;;;191    {
;;;192        // LWG issue 227 - _TypeT must satisfy Assignable and CopyConstructible
;;;193        _TypeT __tmp = __a;
;;;194        __a = __b;
000002  680b              LDR      r3,[r1,#0]
000004  6003              STR      r3,[r0,#0]
;;;195        __b = __tmp;
000006  600a              STR      r2,[r1,#0]
;;;196    }
000008  4770              BX       lr
;;;197    
                          ENDP


                          AREA ||area_number.177||, COMGROUP=_ZSt4swapIjEvRT_S1_, LINKORDER=||t._ZSt4swapIjEvRT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.177||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt4swapIjEvRT_S1_||
                          DCD      0x00000001
